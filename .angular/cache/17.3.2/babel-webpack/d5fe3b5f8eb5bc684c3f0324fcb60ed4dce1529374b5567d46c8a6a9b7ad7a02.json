{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nlet WorkflowModalComponent = class WorkflowModalComponent {\n  constructor(workflowService, alertService) {\n    this.workflowService = workflowService;\n    this.alertService = alertService;\n    this.close = new EventEmitter();\n    this.workflows = [];\n    this.showForm = false;\n  }\n  ngOnInit() {\n    console.log('WorkflowModalComponent initialized with employeeId:', this.employeeId);\n    if (!this.employeeId) {\n      console.error('No employeeId provided to WorkflowModalComponent');\n      return;\n    }\n    this.loadWorkflows();\n  }\n  loadWorkflows() {\n    console.log('Loading workflows for employeeId:', this.employeeId);\n    if (!this.employeeId) {\n      console.error('Cannot load workflows: No employeeId provided');\n      return;\n    }\n    this.workflowService.getByEmployeeId(this.employeeId).subscribe({\n      next: workflows => {\n        console.log('Workflows loaded:', workflows);\n        this.workflows = workflows;\n      },\n      error: error => {\n        console.error('Error loading workflows:', error);\n        this.alertService.error('Error loading workflows');\n      }\n    });\n  }\n  showAddForm() {\n    console.log('Showing add form');\n    this.selectedWorkflow = null;\n    this.showForm = true;\n  }\n  editWorkflow(workflow) {\n    console.log('Editing workflow:', workflow);\n    this.selectedWorkflow = workflow;\n    this.showForm = true;\n  }\n  hideForm() {\n    console.log('Hiding form');\n    this.showForm = false;\n    this.selectedWorkflow = null;\n  }\n  onWorkflowSaved(workflow) {\n    console.log('Workflow saved:', workflow);\n    this.loadWorkflows();\n    this.hideForm();\n  }\n  deleteWorkflow(id) {\n    console.log('Deleting workflow:', id);\n    if (confirm('Are you sure you want to delete this workflow?')) {\n      this.workflowService.delete(id).subscribe({\n        next: () => {\n          console.log('Workflow deleted successfully');\n          this.workflows = this.workflows.filter(x => x.id !== id);\n          this.alertService.success('Workflow deleted successfully');\n        },\n        error: error => {\n          console.error('Error deleting workflow:', error);\n          this.alertService.error('Error deleting workflow');\n        }\n      });\n    }\n  }\n  onClose() {\n    console.log('Closing modal');\n    this.close.emit();\n  }\n};\n__decorate([Input()], WorkflowModalComponent.prototype, \"employeeId\", void 0);\n__decorate([Output()], WorkflowModalComponent.prototype, \"close\", void 0);\nWorkflowModalComponent = __decorate([Component({\n  selector: 'app-workflow-modal',\n  template: `\n        <div class=\"modal-backdrop\" (click)=\"onClose()\">\n            <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\n                <div class=\"modal-header\">\n                    <h3>Employee Workflows</h3>\n                    <button type=\"button\" class=\"close\" (click)=\"onClose()\">&times;</button>\n                </div>\n                <div class=\"modal-body\">\n                    <div class=\"d-flex justify-content-between align-items-center mb-3\">\n                        <h4>Workflows</h4>\n                        <button class=\"btn btn-sm btn-success\" (click)=\"showAddForm()\">Add Workflow</button>\n                    </div>\n\n                    <div *ngIf=\"showForm\" class=\"mb-4\">\n                        <app-workflow-form\n                            [employeeId]=\"employeeId\"\n                            [workflow]=\"selectedWorkflow\"\n                            (saved)=\"onWorkflowSaved($event)\"\n                            (cancelled)=\"hideForm()\">\n                        </app-workflow-form>\n                    </div>\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table table-sm\">\n                            <thead>\n                                <tr>\n                                    <th>Type</th>\n                                    <th>Details</th>\n                                    <th>Status</th>\n                                    <th>Date</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let workflow of workflows\">\n                                    <td>{{workflow.type}}</td>\n                                    <td>{{workflow.details}}</td>\n                                    <td>\n                                        <span class=\"badge\" [ngClass]=\"{\n                                            'badge-warning': workflow.status === 'Pending',\n                                            'badge-info': workflow.status === 'In Progress',\n                                            'badge-success': workflow.status === 'Approved' || workflow.status === 'Completed',\n                                            'badge-danger': workflow.status === 'Rejected'\n                                        }\">\n                                            {{workflow.status}}\n                                        </span>\n                                    </td>\n                                    <td>{{workflow.dateCreated | date:'short'}}</td>\n                                    <td>\n                                        <button class=\"btn btn-sm btn-primary\" (click)=\"editWorkflow(workflow)\">Edit</button>\n                                        <button class=\"btn btn-sm btn-danger\" (click)=\"deleteWorkflow(workflow.id)\">Delete</button>\n                                    </td>\n                                </tr>\n                                <tr *ngIf=\"!workflows?.length\">\n                                    <td colspan=\"5\" class=\"text-center\">No workflows found</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n  styles: [`\n        .modal-backdrop {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.5);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n        }\n        .modal-content {\n            background: white;\n            padding: 20px;\n            border-radius: 4px;\n            width: 90%;\n            max-width: 800px;\n            max-height: 90vh;\n            overflow-y: auto;\n        }\n        .modal-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 1rem;\n        }\n        .close {\n            background: none;\n            border: none;\n            font-size: 1.5rem;\n            cursor: pointer;\n        }\n        .table {\n            margin-bottom: 1rem;\n        }\n        .badge {\n            padding: 0.5em 0.75em;\n        }\n    `]\n})], WorkflowModalComponent);\nexport { WorkflowModalComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}