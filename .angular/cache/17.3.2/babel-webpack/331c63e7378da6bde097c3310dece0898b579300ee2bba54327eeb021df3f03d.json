{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first, switchMap } from 'rxjs/operators';\nlet TransferModalComponent = class TransferModalComponent {\n  constructor(formBuilder, employeeService, departmentService, alertService) {\n    this.formBuilder = formBuilder;\n    this.employeeService = employeeService;\n    this.departmentService = departmentService;\n    this.alertService = alertService;\n    this.close = new EventEmitter();\n    this.transferComplete = new EventEmitter();\n    this.loading = false;\n    this.submitted = false;\n    this.departments = [];\n  }\n  ngOnInit() {\n    if (!this.employee || !this.employee.id) {\n      console.error('Invalid employee data:', this.employee);\n      this.alertService.error('Employee data is missing');\n      this.close.emit();\n      return;\n    }\n    this.form = this.formBuilder.group({\n      departmentId: [this.employee.departmentId || '', Validators.required]\n    });\n    // Load departments\n    this.departmentService.getAll().pipe(first()).subscribe({\n      next: departments => {\n        if (!departments || departments.length === 0) {\n          this.alertService.error('No departments available');\n          return;\n        }\n        this.departments = departments;\n      },\n      error: error => {\n        console.error('Error loading departments:', error);\n        this.alertService.error('Error loading departments');\n      }\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    if (!this.employee || !this.employee.id) {\n      console.error('Invalid employee data:', this.employee);\n      this.alertService.error('Employee data is missing');\n      return;\n    }\n    const newDepartmentId = this.f.departmentId.value;\n    if (!newDepartmentId) {\n      this.alertService.error('Please select a department');\n      return;\n    }\n    // Don't proceed if the department hasn't changed\n    if (newDepartmentId === this.employee.departmentId) {\n      this.alertService.error('Employee is already in this department');\n      return;\n    }\n    this.loading = true;\n    this.employeeService.transferDepartment(this.employee.id, newDepartmentId).pipe(first(), switchMap(response => {\n      console.log('Transfer successful:', response);\n      return this.employeeService.getById(this.employee.id);\n    })).subscribe({\n      next: updatedEmployee => {\n        console.log('Updated employee data:', updatedEmployee);\n        this.alertService.success('Employee transferred successfully');\n        this.transferComplete.emit();\n        this.close.emit();\n      },\n      error: error => {\n        console.error('Transfer error:', error);\n        this.alertService.error(error?.message || 'Error transferring employee');\n        this.loading = false;\n      }\n    });\n  }\n  onClose() {\n    this.close.emit();\n  }\n};\n__decorate([Input()], TransferModalComponent.prototype, \"employee\", void 0);\n__decorate([Output()], TransferModalComponent.prototype, \"close\", void 0);\n__decorate([Output()], TransferModalComponent.prototype, \"transferComplete\", void 0);\nTransferModalComponent = __decorate([Component({\n  selector: 'app-transfer-modal',\n  templateUrl: './transfer-modal.component.html'\n})], TransferModalComponent);\nexport { TransferModalComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}