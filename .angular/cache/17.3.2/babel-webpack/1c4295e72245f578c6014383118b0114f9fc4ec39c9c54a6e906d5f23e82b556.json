{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { WorkflowType, WorkflowStatus } from '@app/_models/workflow-type.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@app/_services/workflow.service\";\nimport * as i3 from \"@app/_services/alert.service\";\nimport * as i4 from \"@app/_services/account.service\";\nimport * as i5 from \"@angular/common\";\nconst _c0 = a0 => ({\n  \"is-invalid\": a0\n});\nfunction WorkflowFormComponent_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r1);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(type_r1);\n  }\n}\nfunction WorkflowFormComponent_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Type is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction WorkflowFormComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, WorkflowFormComponent_div_11_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.type.errors.required);\n  }\n}\nfunction WorkflowFormComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Details are required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction WorkflowFormComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, WorkflowFormComponent_div_16_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.details.errors.required);\n  }\n}\nfunction WorkflowFormComponent_div_17_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const status_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", status_r3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(status_r3);\n  }\n}\nfunction WorkflowFormComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"label\", 18);\n    i0.ɵɵtext(2, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 19);\n    i0.ɵɵtemplate(4, WorkflowFormComponent_div_17_option_4_Template, 2, 2, \"option\", 6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx_r1.submitted && ctx_r1.f.status.errors));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.workflowStatuses);\n  }\n}\nfunction WorkflowFormComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"label\", 20);\n    i0.ɵɵtext(2, \"Add Comment\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"textarea\", 21);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction WorkflowFormComponent_span_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 22);\n  }\n}\nfunction WorkflowFormComponent_div_25_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26)(1, \"div\", 27)(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"small\", 28);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 29);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const comment_r4 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(comment_r4.userName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(6, 3, comment_r4.dateCreated, \"short\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(comment_r4.comment);\n  }\n}\nfunction WorkflowFormComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"h5\");\n    i0.ɵɵtext(2, \"Comments\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 24);\n    i0.ɵɵtemplate(4, WorkflowFormComponent_div_25_div_4_Template, 9, 6, \"div\", 25);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.workflow.comments);\n  }\n}\nexport let WorkflowFormComponent = /*#__PURE__*/(() => {\n  class WorkflowFormComponent {\n    constructor(formBuilder, workflowService, alertService, accountService) {\n      this.formBuilder = formBuilder;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.saved = new EventEmitter();\n      this.cancelled = new EventEmitter();\n      this.loading = false;\n      this.submitted = false;\n      this.isEditMode = false;\n      this.workflowTypes = Object.values(WorkflowType);\n      this.workflowStatuses = Object.values(WorkflowStatus);\n    }\n    ngOnInit() {\n      console.log('WorkflowFormComponent initialized:', {\n        employeeId: this.employeeId,\n        workflow: this.workflow\n      });\n      if (!this.employeeId) {\n        console.error('No employeeId provided to WorkflowFormComponent');\n        return;\n      }\n      this.isEditMode = !!this.workflow;\n      console.log('Form mode:', this.isEditMode ? 'Edit' : 'Create');\n      this.form = this.formBuilder.group({\n        type: ['', Validators.required],\n        details: ['', Validators.required],\n        status: [this.isEditMode ? this.workflow.status : WorkflowStatus.PENDING],\n        comment: ['']\n      });\n      if (this.isEditMode) {\n        console.log('Patching form with workflow data:', this.workflow);\n        this.form.patchValue({\n          type: this.workflow.type,\n          details: this.workflow.details,\n          status: this.workflow.status\n        });\n      }\n    }\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      console.log('Form submitted:', this.form.value);\n      this.submitted = true;\n      this.alertService.clear();\n      if (this.form.invalid) {\n        console.log('Form is invalid:', this.form.errors);\n        return;\n      }\n      this.loading = true;\n      const workflowData = {\n        ...this.form.value,\n        employeeId: this.employeeId,\n        dateUpdated: new Date().toISOString()\n      };\n      console.log('Submitting workflow data:', workflowData);\n      if (this.isEditMode) {\n        this.updateWorkflow(workflowData);\n      } else {\n        workflowData.dateCreated = new Date().toISOString();\n        this.createWorkflow(workflowData);\n      }\n    }\n    createWorkflow(workflowData) {\n      console.log('Creating workflow:', workflowData);\n      this.workflowService.create(workflowData).subscribe({\n        next: workflow => {\n          console.log('Workflow created successfully:', workflow);\n          this.alertService.success('Workflow created successfully');\n          this.saved.emit(workflow);\n        },\n        error: error => {\n          console.error('Error creating workflow:', error);\n          this.alertService.error(error?.error?.message || 'Error creating workflow');\n          this.loading = false;\n        }\n      });\n    }\n    updateWorkflow(workflowData) {\n      console.log('Updating workflow:', workflowData);\n      const comment = this.form.value.comment;\n      if (comment) {\n        console.log('Adding comment:', comment);\n        this.addComment(comment);\n      }\n      this.workflowService.update(this.workflow.id, workflowData).subscribe({\n        next: workflow => {\n          console.log('Workflow updated successfully:', workflow);\n          this.alertService.success('Workflow updated successfully');\n          this.saved.emit(workflow);\n        },\n        error: error => {\n          console.error('Error updating workflow:', error);\n          this.alertService.error(error?.error?.message || 'Error updating workflow');\n          this.loading = false;\n        }\n      });\n    }\n    addComment(comment) {\n      console.log('Adding comment to workflow:', comment);\n      const currentUser = this.accountService.accountValue;\n      const workflowComment = {\n        id: new Date().getTime().toString(),\n        workflowId: this.workflow.id,\n        userId: currentUser.id,\n        userName: `${currentUser.firstName} ${currentUser.lastName}`,\n        comment: comment,\n        dateCreated: new Date().toISOString()\n      };\n      console.log('Created workflow comment:', workflowComment);\n      if (!this.workflow.comments) {\n        this.workflow.comments = [];\n      }\n      this.workflow.comments.push(workflowComment);\n    }\n    onCancel() {\n      console.log('Form cancelled');\n      this.cancelled.emit();\n    }\n    static #_ = this.ɵfac = function WorkflowFormComponent_Factory(t) {\n      return new (t || WorkflowFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.WorkflowService), i0.ɵɵdirectiveInject(i3.AlertService), i0.ɵɵdirectiveInject(i4.AccountService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: WorkflowFormComponent,\n      selectors: [[\"app-workflow-form\"]],\n      inputs: {\n        employeeId: \"employeeId\",\n        workflow: \"workflow\"\n      },\n      outputs: {\n        saved: \"saved\",\n        cancelled: \"cancelled\"\n      },\n      decls: 26,\n      vars: 17,\n      consts: [[1, \"workflow-form\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-group\"], [\"for\", \"type\"], [\"formControlName\", \"type\", 1, \"form-control\", 3, \"ngClass\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"details\"], [\"formControlName\", \"details\", \"rows\", \"3\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"form-group\", 4, \"ngIf\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-link\", 3, \"click\"], [\"class\", \"mt-4\", 4, \"ngIf\"], [3, \"value\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [\"for\", \"status\"], [\"formControlName\", \"status\", 1, \"form-control\", 3, \"ngClass\"], [\"for\", \"comment\"], [\"formControlName\", \"comment\", \"rows\", \"2\", 1, \"form-control\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"], [1, \"mt-4\"], [1, \"comment-list\"], [\"class\", \"comment\", 4, \"ngFor\", \"ngForOf\"], [1, \"comment\"], [1, \"comment-header\"], [1, \"text-muted\"], [1, \"comment-body\"]],\n      template: function WorkflowFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\");\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function WorkflowFormComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"select\", 4)(8, \"option\", 5);\n          i0.ɵɵtext(9, \"Select Type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(10, WorkflowFormComponent_option_10_Template, 2, 2, \"option\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(11, WorkflowFormComponent_div_11_Template, 2, 1, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 8);\n          i0.ɵɵtext(14, \"Details\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"textarea\", 9);\n          i0.ɵɵtemplate(16, WorkflowFormComponent_div_16_Template, 2, 1, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(17, WorkflowFormComponent_div_17_Template, 5, 4, \"div\", 10)(18, WorkflowFormComponent_div_18_Template, 4, 0, \"div\", 10);\n          i0.ɵɵelementStart(19, \"div\", 2)(20, \"button\", 11);\n          i0.ɵɵtemplate(21, WorkflowFormComponent_span_21_Template, 1, 0, \"span\", 12);\n          i0.ɵɵtext(22);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function WorkflowFormComponent_Template_button_click_23_listener() {\n            return ctx.onCancel();\n          });\n          i0.ɵɵtext(24, \"Cancel\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵtemplate(25, WorkflowFormComponent_div_25_Template, 5, 1, \"div\", 14);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Edit\" : \"Create\", \" Workflow\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"formGroup\", ctx.form);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c0, ctx.submitted && ctx.f.type.errors));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.workflowTypes);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.type.errors);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(15, _c0, ctx.submitted && ctx.f.details.errors));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.details.errors);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.isEditMode);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.isEditMode);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", ctx.loading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Update\" : \"Create\", \" \");\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.workflow == null ? null : ctx.workflow.comments == null ? null : ctx.workflow.comments.length);\n        }\n      },\n      dependencies: [i5.NgClass, i5.NgForOf, i5.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.DatePipe],\n      styles: [\".workflow-form[_ngcontent-%COMP%]{padding:1rem;background:#fff;border-radius:4px;box-shadow:0 1px 3px #0000001a}.form-group[_ngcontent-%COMP%]{margin-bottom:1rem}.comment-list[_ngcontent-%COMP%]{max-height:300px;overflow-y:auto}.comment[_ngcontent-%COMP%]{padding:.5rem;border-bottom:1px solid #eee}.comment-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;margin-bottom:.25rem}.comment-body[_ngcontent-%COMP%]{color:#666}\"]\n    });\n  }\n  return WorkflowFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}