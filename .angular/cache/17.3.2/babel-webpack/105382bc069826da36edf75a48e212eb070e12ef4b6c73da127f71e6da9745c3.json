{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport let ApiInterceptor = /*#__PURE__*/(() => {\n  class ApiInterceptor {\n    constructor() {\n      this.apiUrls = [environment.apiUrl, environment.apiUrlAlt1, environment.apiUrlAlt2];\n    }\n    intercept(request, next) {\n      // Log API requests in debug mode\n      if (environment.debugApi) {\n        console.log(`🌐 API Request: ${request.method} ${request.url}`);\n      }\n      // Add common headers\n      const modifiedRequest = request.clone({\n        setHeaders: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      return next.handle(modifiedRequest).pipe(catchError(error => {\n        if (environment.debugApi) {\n          console.error(`❌ API Error: ${request.method} ${request.url}`, error);\n        }\n        // Handle specific error cases\n        if (error.status === 404) {\n          console.warn(`⚠️ 404 Not Found: ${request.url}`);\n          console.warn('This might indicate an incorrect API endpoint or URL structure');\n        }\n        if (error.status === 0) {\n          console.error('🚫 Network Error: Unable to connect to the backend');\n          console.error('Please check if the backend is running and accessible');\n        }\n        if (error.status === 403) {\n          console.error('🚫 Forbidden: Access denied to the API endpoint');\n        }\n        if (error.status === 500) {\n          console.error('💥 Server Error: Backend encountered an internal error');\n        }\n        return throwError(() => error);\n      }));\n    }\n    static #_ = this.ɵfac = function ApiInterceptor_Factory(t) {\n      return new (t || ApiInterceptor)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiInterceptor,\n      factory: ApiInterceptor.ɵfac\n    });\n  }\n  return ApiInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}