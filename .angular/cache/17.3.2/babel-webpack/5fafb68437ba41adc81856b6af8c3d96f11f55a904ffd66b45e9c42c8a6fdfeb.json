{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet DisposeComponent = class DisposeComponent {\n  constructor(formBuilder, router, route, disposeService, itemService, locationService, alertService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.route = route;\n    this.disposeService = disposeService;\n    this.itemService = itemService;\n    this.locationService = locationService;\n    this.alertService = alertService;\n    this.items = [];\n    this.locations = [];\n    this.availableStock = 0;\n    this.loading = false;\n    this.submitted = false;\n    this.error = '';\n  }\n  ngOnInit() {\n    this.initForm();\n    this.loadData();\n    // Listen for stock data changes from other components\n    window.addEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n  }\n  initForm() {\n    this.form = this.formBuilder.group({\n      itemId: ['', Validators.required],\n      quantity: ['', [Validators.required, Validators.min(1)]],\n      disposalValue: ['', [Validators.required, Validators.min(0.01)]],\n      locationId: ['', Validators.required],\n      reason: ['']\n    });\n  }\n  loadData() {\n    // Load items\n    this.itemService.getAll().subscribe({\n      next: items => {\n        this.items = items;\n        console.log('Items loaded:', items.length);\n      },\n      error: error => {\n        console.error('Error loading items:', error);\n        this.alertService.error('Error loading items');\n      }\n    });\n    // Load locations\n    this.locationService.getAll().subscribe({\n      next: locations => {\n        this.locations = locations;\n        console.log('Locations loaded:', locations.length);\n      },\n      error: error => {\n        console.error('Error loading locations:', error);\n        this.alertService.error('Error loading locations');\n      }\n    });\n    // Check for pre-selected item\n    this.route.queryParams.subscribe(params => {\n      if (params['itemId']) {\n        const itemId = parseInt(params['itemId']);\n        console.log('Pre-selected item:', itemId);\n        this.form.patchValue({\n          itemId: itemId\n        });\n        this.checkAvailableStock(itemId);\n      }\n    });\n    // Listen for item changes\n    this.form.get('itemId')?.valueChanges.subscribe(itemId => {\n      if (itemId) {\n        this.checkAvailableStock(itemId);\n      } else {\n        this.availableStock = 0;\n      }\n    });\n  }\n  checkAvailableStock(itemId) {\n    console.log('Checking available stock for item:', itemId);\n    // Use dispose service to get actual available stock\n    this.disposeService.validateDisposal(itemId, 0).subscribe({\n      next: result => {\n        console.log('Available stock result:', result);\n        if (result && result.valid !== undefined) {\n          this.availableStock = result.availableStock || 0;\n          console.log('Available stock set to:', this.availableStock);\n          // Show detailed stock information\n          if (result.totalStock !== undefined && result.usedInPCComponents !== undefined) {\n            console.log('Stock breakdown:', {\n              totalStock: result.totalStock,\n              usedInPCComponents: result.usedInPCComponents,\n              availableStock: result.availableStock\n            });\n            // Show alert with detailed information\n            if (result.usedInPCComponents > 0) {\n              this.alertService.info(`Stock Info: ${result.totalStock} total - ${result.usedInPCComponents} used in PC components = ${result.availableStock} available for disposal`);\n            }\n          }\n          // Update quantity field with available stock if it's greater than 0\n          if (this.availableStock > 0) {\n            this.form.patchValue({\n              quantity: this.availableStock\n            });\n          } else {\n            this.form.patchValue({\n              quantity: ''\n            });\n          }\n        } else {\n          console.log('Invalid result format:', result);\n          this.availableStock = 0;\n          this.form.patchValue({\n            quantity: ''\n          });\n        }\n      },\n      error: error => {\n        console.error('Error checking available stock:', error);\n        console.error('Error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          error: error.error,\n          message: error.message\n        });\n        this.availableStock = 0;\n        this.form.patchValue({\n          quantity: ''\n        });\n        this.alertService.error('Error loading available stock: ' + (error.error?.message || error.message || 'Unknown error'));\n      }\n    });\n  }\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    this.error = '';\n    console.log('Form submitted, checking validity...');\n    console.log('Form valid:', this.form.valid);\n    console.log('Form value:', this.form.value);\n    console.log('Form errors:', this.form.errors);\n    if (this.form.invalid) {\n      console.log('Form is invalid, returning');\n      console.log('Form control errors:');\n      Object.keys(this.form.controls).forEach(key => {\n        const control = this.form.get(key);\n        if (control && control.errors) {\n          console.log(`  ${key}:`, control.errors);\n        }\n      });\n      return;\n    }\n    const formData = this.form.value;\n    console.log('Submitting dispose form:', formData);\n    this.loading = true;\n    // Format data properly - don't add defaults for empty values\n    const disposeData = {\n      itemId: parseInt(formData.itemId),\n      quantity: parseInt(formData.quantity),\n      disposalValue: formData.disposalValue ? parseFloat(formData.disposalValue) : 0,\n      locationId: parseInt(formData.locationId),\n      reason: formData.reason || '',\n      disposalDate: new Date()\n    };\n    console.log('Formatted dispose data:', disposeData);\n    this.disposeService.create(disposeData).subscribe({\n      next: result => {\n        console.log('Dispose successful:', result);\n        this.loading = false;\n        this.alertService.success('Items disposed successfully');\n        // Notify stock list component to refresh its data\n        this.notifyStockListRefresh();\n        console.log('Navigating to dispose list...');\n        this.router.navigate(['/dispose']); // Navigate to dispose list\n      },\n      error: error => {\n        console.error('Dispose error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          error: error.error,\n          message: error.message,\n          url: error.url\n        });\n        this.loading = false;\n        // Simple error message\n        let errorMessage = 'Error disposing items';\n        if (error.error && error.error.message) {\n          errorMessage += ': ' + error.error.message;\n        } else if (error.message) {\n          errorMessage += ': ' + error.message;\n        } else if (error.status === 400) {\n          errorMessage += ': Invalid data provided';\n        } else if (error.status === 401) {\n          errorMessage += ': Unauthorized - please login again';\n        } else if (error.status === 403) {\n          errorMessage += ': Access denied';\n        } else if (error.status === 404) {\n          errorMessage += ': Item or location not found';\n        } else if (error.status === 500) {\n          errorMessage += ': Server error - please try again';\n        }\n        this.error = errorMessage;\n        this.alertService.error(this.error);\n      }\n    });\n  }\n  disposeAll() {\n    if (!this.form.value.itemId) {\n      this.alertService.error('Please select an item first');\n      return;\n    }\n    if (this.availableStock <= 0) {\n      this.alertService.error('No stock available to dispose');\n      return;\n    }\n    if (!confirm(`Are you sure you want to dispose ALL ${this.availableStock} available items?`)) {\n      return;\n    }\n    this.form.patchValue({\n      quantity: this.availableStock\n    });\n    this.onSubmit();\n  }\n  testNavigation() {\n    console.log('Testing navigation to dispose list...');\n    this.router.navigate(['/dispose']).then(() => {\n      console.log('Navigation successful');\n    }).catch(error => {\n      console.error('Navigation failed:', error);\n    });\n  }\n  // Method to notify stock list component to refresh its data\n  notifyStockListRefresh() {\n    // Dispatch a custom event that stock list component can listen to\n    const event = new CustomEvent('stockDataChanged', {\n      detail: {\n        timestamp: new Date().getTime(),\n        message: 'Items disposed - stock data updated'\n      }\n    });\n    window.dispatchEvent(event);\n    console.log('Stock data change event dispatched from dispose component');\n  }\n  // Handle stock data changes from other components\n  handleStockDataChange(event) {\n    console.log('Stock data change detected in dispose component:', event.detail);\n    // Re-check available stock for the currently selected item\n    const currentItemId = this.form.get('itemId')?.value;\n    if (currentItemId) {\n      console.log('Re-checking available stock for item:', currentItemId);\n      this.checkAvailableStock(currentItemId);\n    }\n    // Show a brief notification\n    this.alertService.info('Stock data updated - available quantities refreshed');\n  }\n  ngOnDestroy() {\n    // Clean up event listener\n    window.removeEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n  }\n};\nDisposeComponent = __decorate([Component({\n  selector: 'app-dispose',\n  templateUrl: './dispose.component.html'\n})], DisposeComponent);\nexport { DisposeComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}