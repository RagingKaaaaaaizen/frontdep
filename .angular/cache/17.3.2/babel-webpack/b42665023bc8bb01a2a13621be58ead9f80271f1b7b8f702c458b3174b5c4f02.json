{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = (a0, a1, a2, a3) => ({\n  \"badge-success\": a0,\n  \"badge-warning\": a1,\n  \"badge-secondary\": a2,\n  \"badge-danger\": a3\n});\nconst _c1 = (a0, a1, a2, a3) => ({\n  \"status-working\": a0,\n  \"status-warning\": a1,\n  \"status-danger\": a2,\n  \"status-info\": a3\n});\nconst _c2 = (a0, a1, a2, a3) => ({\n  \"fa-check-circle\": a0,\n  \"fa-exclamation-triangle\": a1,\n  \"fa-times-circle\": a2,\n  \"fa-info-circle\": a3\n});\nconst _c3 = a0 => ({\n  \"is-invalid\": a0\n});\nconst _c4 = (a0, a1, a2) => ({\n  \"is-invalid\": a0,\n  \"border-success\": a1,\n  \"border-warning\": a2\n});\nconst _c5 = (a0, a1) => ({\n  \"text-success\": a0,\n  \"text-muted\": a1\n});\nfunction PCComponentsComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 67);\n    i0.ɵɵelement(1, \"i\", 38);\n    i0.ɵɵtext(2, \" Issues Detected \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PCComponentsComponent_span_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 68);\n    i0.ɵɵelement(1, \"i\", 69);\n    i0.ɵɵtext(2, \" All Components Working \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PCComponentsComponent_div_79_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 103);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"value\", item_r3.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", item_r3.name, \" - Available: \", ctx_r1.getAvailableQuantity(item_r3.id), \" units \");\n  }\n}\nfunction PCComponentsComponent_div_79_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 104);\n    i0.ɵɵtext(1, \" Please select an item \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PCComponentsComponent_div_79_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 105)(1, \"div\", 106)(2, \"div\", 18);\n    i0.ɵɵelement(3, \"i\", 107);\n    i0.ɵɵelementStart(4, \"div\")(5, \"strong\");\n    i0.ɵɵtext(6, \"Stock Status:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7);\n    i0.ɵɵelement(8, \"br\");\n    i0.ɵɵelementStart(9, \"small\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(11, \"div\", 108)(12, \"small\", 109)(13, \"strong\");\n    i0.ɵɵtext(14, \"Debug Info:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(15, \"br\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.getStockAlertClass(ctx_r1.newComponent.itemId));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getStockGuidance(ctx_r1.newComponent.itemId), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Available Quantity: \", ctx_r1.getAvailableQuantity(ctx_r1.newComponent.itemId), \" units\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate3(\" Stock entries: \", ctx_r1.getStockDebugInfo(ctx_r1.newComponent.itemId).matchingStocks, \" | Available stocks: \", ctx_r1.getStockDebugInfo(ctx_r1.newComponent.itemId).availableStocks, \" | Total stocks loaded: \", ctx_r1.getStockDebugInfo(ctx_r1.newComponent.itemId).totalStocks, \" \");\n  }\n}\nfunction PCComponentsComponent_div_79_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 104);\n    i0.ɵɵtext(1, \" Quantity must be greater than 0 \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PCComponentsComponent_div_79_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 104);\n    i0.ɵɵtext(1, \" Price must be greater than 0 \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PCComponentsComponent_div_79_i_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 69);\n  }\n}\nfunction PCComponentsComponent_div_79_i_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 27);\n  }\n}\nfunction PCComponentsComponent_div_79_span_68_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 110);\n  }\n}\nfunction PCComponentsComponent_div_79_i_69_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 111);\n  }\n}\nfunction PCComponentsComponent_div_79_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\", 3)(2, \"div\", 16)(3, \"div\", 70)(4, \"h5\", 26);\n    i0.ɵɵelement(5, \"i\", 14);\n    i0.ɵɵtext(6, \" Add New Component \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 17)(8, \"form\", 71, 0);\n    i0.ɵɵlistener(\"ngSubmit\", function PCComponentsComponent_div_79_Template_form_ngSubmit_8_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveComponent());\n    });\n    i0.ɵɵelementStart(10, \"div\", 2)(11, \"div\", 72)(12, \"label\", 73);\n    i0.ɵɵelement(13, \"i\", 74);\n    i0.ɵɵtext(14, \" Item * \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"select\", 75);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function PCComponentsComponent_div_79_Template_select_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.newComponent.itemId, $event) || (ctx_r1.newComponent.itemId = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"change\", function PCComponentsComponent_div_79_Template_select_change_15_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onItemChange());\n    });\n    i0.ɵɵelementStart(16, \"option\", 76);\n    i0.ɵɵtext(17, \"Select Item with Available Stock\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(18, PCComponentsComponent_div_79_option_18_Template, 2, 3, \"option\", 77);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(19, PCComponentsComponent_div_79_div_19_Template, 2, 0, \"div\", 78)(20, PCComponentsComponent_div_79_div_20_Template, 17, 6, \"div\", 79);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\", 72)(22, \"label\", 73);\n    i0.ɵɵelement(23, \"i\", 80);\n    i0.ɵɵtext(24, \" Quantity * \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"input\", 81);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function PCComponentsComponent_div_79_Template_input_ngModelChange_25_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.newComponent.quantity, $event) || (ctx_r1.newComponent.quantity = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"blur\", function PCComponentsComponent_div_79_Template_input_blur_25_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onQuantityChange());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(26, PCComponentsComponent_div_79_div_26_Template, 2, 0, \"div\", 78);\n    i0.ɵɵelementStart(27, \"small\", 82);\n    i0.ɵɵelement(28, \"i\", 27);\n    i0.ɵɵtext(29);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(30, \"div\", 2)(31, \"div\", 83)(32, \"label\", 73);\n    i0.ɵɵelement(33, \"i\", 84);\n    i0.ɵɵtext(34, \" Price (per unit) * \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"input\", 85);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function PCComponentsComponent_div_79_Template_input_ngModelChange_35_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.newComponent.price, $event) || (ctx_r1.newComponent.price = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(36, PCComponentsComponent_div_79_div_36_Template, 2, 0, \"div\", 78);\n    i0.ɵɵelementStart(37, \"small\", 86);\n    i0.ɵɵtemplate(38, PCComponentsComponent_div_79_i_38_Template, 1, 0, \"i\", 87)(39, PCComponentsComponent_div_79_i_39_Template, 1, 0, \"i\", 88);\n    i0.ɵɵtext(40);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(41, \"div\", 83)(42, \"label\", 73);\n    i0.ɵɵelement(43, \"i\", 89);\n    i0.ɵɵtext(44, \" Status * \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(45, \"select\", 90);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function PCComponentsComponent_div_79_Template_select_ngModelChange_45_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.newComponent.status, $event) || (ctx_r1.newComponent.status = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementStart(46, \"option\", 91);\n    i0.ɵɵtext(47, \"Working\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(48, \"option\", 92);\n    i0.ɵɵtext(49, \"Missing\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(50, \"option\", 93);\n    i0.ɵɵtext(51, \"Not Working\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(52, \"option\", 94);\n    i0.ɵɵtext(53, \"Maintenance\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(54, \"small\", 82);\n    i0.ɵɵtext(55, \" Select the current status of this component \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(56, \"div\", 83)(57, \"label\", 73);\n    i0.ɵɵelement(58, \"i\", 95);\n    i0.ɵɵtext(59, \" Total Price \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(60, \"input\", 96);\n    i0.ɵɵelementStart(61, \"small\", 82);\n    i0.ɵɵtext(62, \" Automatically calculated (Price \\u00D7 Quantity) \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(63, \"div\", 97)(64, \"button\", 98);\n    i0.ɵɵlistener(\"click\", function PCComponentsComponent_div_79_Template_button_click_64_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.cancelAdd());\n    });\n    i0.ɵɵelement(65, \"i\", 99);\n    i0.ɵɵtext(66, \" Cancel \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(67, \"button\", 100);\n    i0.ɵɵtemplate(68, PCComponentsComponent_div_79_span_68_Template, 1, 0, \"span\", 101)(69, PCComponentsComponent_div_79_i_69_Template, 1, 0, \"i\", 102);\n    i0.ɵɵtext(70);\n    i0.ɵɵelementEnd()()()()()()();\n  }\n  if (rf & 2) {\n    const componentForm_r4 = i0.ɵɵreference(9);\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(15);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.newComponent.itemId);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(24, _c3, ctx_r1.submitted && !ctx_r1.newComponent.itemId));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.availableItems);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.submitted && !ctx_r1.newComponent.itemId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.newComponent.itemId);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.newComponent.quantity);\n    i0.ɵɵproperty(\"max\", ctx_r1.getAvailableQuantity(ctx_r1.newComponent.itemId))(\"ngClass\", i0.ɵɵpureFunction1(26, _c3, ctx_r1.submitted && (!ctx_r1.newComponent.quantity || ctx_r1.newComponent.quantity <= 0)));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.submitted && (!ctx_r1.newComponent.quantity || ctx_r1.newComponent.quantity <= 0));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Cannot exceed available stock quantity (Max: \", ctx_r1.getAvailableQuantity(ctx_r1.newComponent.itemId), \") \");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.newComponent.price);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(28, _c4, ctx_r1.submitted && (!ctx_r1.newComponent.price || ctx_r1.newComponent.price <= 0), ctx_r1.newComponent.price && ctx_r1.newComponent.stockId, !ctx_r1.newComponent.price));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.submitted && (!ctx_r1.newComponent.price || ctx_r1.newComponent.price <= 0));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(32, _c5, ctx_r1.newComponent.price && ctx_r1.newComponent.stockId, !ctx_r1.newComponent.price));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.newComponent.price && ctx_r1.newComponent.stockId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.newComponent.price);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.newComponent.price && ctx_r1.newComponent.stockId ? ctx_r1.getPriceSourceInfo() : \"Price will be auto-filled when item is selected\", \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.newComponent.status);\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"value\", ctx_r1.newComponent.totalPrice || \"\")(\"disabled\", true);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"disabled\", componentForm_r4.invalid || ctx_r1.loading);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.loading);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.loading ? \"Adding...\" : \"Add Component\", \" \");\n  }\n}\nfunction PCComponentsComponent_tr_115_small_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 109);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const component_r6 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", component_r6.remarks, \" \");\n  }\n}\nfunction PCComponentsComponent_tr_115_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 112)(1, \"td\")(2, \"div\", 18)(3, \"div\", 113);\n    i0.ɵɵelement(4, \"i\", 114);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\")(6, \"strong\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"br\");\n    i0.ɵɵtemplate(9, PCComponentsComponent_tr_115_small_9_Template, 2, 1, \"small\", 115);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"td\")(11, \"span\", 116);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"td\")(14, \"span\", 117);\n    i0.ɵɵtext(15);\n    i0.ɵɵpipe(16, \"number\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"td\")(18, \"span\", 118);\n    i0.ɵɵtext(19);\n    i0.ɵɵpipe(20, \"number\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(21, \"td\")(22, \"select\", 119);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function PCComponentsComponent_tr_115_Template_select_ngModelChange_22_listener($event) {\n      const component_r6 = i0.ɵɵrestoreView(_r5).$implicit;\n      i0.ɵɵtwoWayBindingSet(component_r6.status, $event) || (component_r6.status = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"change\", function PCComponentsComponent_tr_115_Template_select_change_22_listener() {\n      const component_r6 = i0.ɵɵrestoreView(_r5).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.updateComponentStatus(component_r6));\n    });\n    i0.ɵɵelementStart(23, \"option\", 91);\n    i0.ɵɵtext(24, \"Working\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"option\", 92);\n    i0.ɵɵtext(26, \"Missing\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"option\", 93);\n    i0.ɵɵtext(28, \"Not Working\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"option\", 94);\n    i0.ɵɵtext(30, \"Maintenance\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(31, \"td\")(32, \"div\", 120)(33, \"button\", 121);\n    i0.ɵɵlistener(\"click\", function PCComponentsComponent_tr_115_Template_button_click_33_listener() {\n      const component_r6 = i0.ɵɵrestoreView(_r5).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.returnToStock(component_r6.id));\n    });\n    i0.ɵɵelement(34, \"i\", 122);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"button\", 123);\n    i0.ɵɵlistener(\"click\", function PCComponentsComponent_tr_115_Template_button_click_35_listener() {\n      const component_r6 = i0.ɵɵrestoreView(_r5).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.removeComponent(component_r6.id));\n    });\n    i0.ɵɵelement(36, \"i\", 124);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const component_r6 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.getComponentRowClass(component_r6));\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r1.getItemNameFromComponent(component_r6));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", component_r6.remarks);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(component_r6.quantity);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\\u20B1\", i0.ɵɵpipeBind2(16, 8, component_r6.price, \"1.2-2\"), \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\\u20B1\", i0.ɵɵpipeBind2(20, 11, component_r6.totalPrice, \"1.2-2\"), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtwoWayProperty(\"ngModel\", component_r6.status);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.getStatusClass(component_r6.status));\n  }\n}\nfunction PCComponentsComponent_tr_116_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 125)(2, \"div\", 126);\n    i0.ɵɵelement(3, \"i\", 127);\n    i0.ɵɵelementStart(4, \"h5\", 109);\n    i0.ɵɵtext(5, \"No components found\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 109);\n    i0.ɵɵtext(7, \"This PC doesn't have any components yet.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function PCComponentsComponent_tr_116_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.addComponent());\n    });\n    i0.ɵɵelement(9, \"i\", 14);\n    i0.ɵɵtext(10, \" Add First Component \");\n    i0.ɵɵelementEnd()()()();\n  }\n}\nexport let PCComponentsComponent = /*#__PURE__*/(() => {\n  class PCComponentsComponent {\n    // Computed property for available stocks count\n    get availableStocksCount() {\n      const count = this.allStocks.filter(stock => stock.quantity > 0).length;\n      console.log('availableStocksCount calculated:', count, 'from', this.allStocks.length, 'total stocks');\n      return count;\n    }\n    // Method to get stock alert class\n    getStockAlertClass(itemId) {\n      if (!itemId) return '';\n      const stockStatus = this.getStockStatus(itemId);\n      console.log(`getStockAlertClass for item ${itemId}:`, stockStatus);\n      if (stockStatus.availableQty > 0) {\n        return 'alert-success';\n      } else if (stockStatus.hasStock && stockStatus.hasZeroStock) {\n        return 'alert-warning';\n      } else {\n        return 'alert-danger';\n      }\n    }\n    // Debug method to get stock details for an item\n    getStockDebugInfo(itemId) {\n      if (!itemId || this.allStocks.length === 0) {\n        return {\n          message: 'No stock data available'\n        };\n      }\n      // Convert itemId to number to ensure type matching\n      const numericItemId = Number(itemId);\n      console.log('getStockDebugInfo - itemId:', itemId, 'type:', typeof itemId);\n      console.log('getStockDebugInfo - numericItemId:', numericItemId, 'type:', typeof numericItemId);\n      console.log('getStockDebugInfo - allStocks itemIds:', this.allStocks.map(s => ({\n        id: s.id,\n        itemId: s.itemId,\n        itemIdType: typeof s.itemId\n      })));\n      const stockEntries = this.allStocks.filter(stock => {\n        const stockItemId = Number(stock.itemId);\n        const matches = stockItemId === numericItemId;\n        console.log(`Stock ${stock.id}: itemId=${stock.itemId} (${typeof stock.itemId}) vs selected=${numericItemId} (${typeof numericItemId}) - matches: ${matches}`);\n        return matches;\n      });\n      const availableStocks = stockEntries.filter(stock => stock.quantity > 0);\n      const result = {\n        itemId,\n        numericItemId,\n        totalStocks: this.allStocks.length,\n        matchingStocks: stockEntries.length,\n        availableStocks: availableStocks.length,\n        stockEntries: stockEntries.map(s => ({\n          id: s.id,\n          itemId: s.itemId,\n          quantity: s.quantity,\n          price: s.price,\n          locationId: s.locationId,\n          locationName: s.location?.name || 'No location'\n        }))\n      };\n      console.log('getStockDebugInfo result:', result);\n      return result;\n    }\n    constructor(route, router, pcService, pcComponentService, stockService, itemService, categoryService, brandService, alertService) {\n      this.route = route;\n      this.router = router;\n      this.pcService = pcService;\n      this.pcComponentService = pcComponentService;\n      this.stockService = stockService;\n      this.itemService = itemService;\n      this.categoryService = categoryService;\n      this.brandService = brandService;\n      this.alertService = alertService;\n      this.pc = null;\n      this.components = [];\n      this.items = [];\n      this.categories = [];\n      this.brands = [];\n      this.allStocks = [];\n      // Add component form properties\n      this.showAddForm = false;\n      this.newComponent = {\n        itemId: null,\n        stockId: null,\n        // Add stockId to track which stock entry is being used\n        quantity: 1,\n        price: null,\n        totalPrice: null,\n        status: 'Working',\n        remarks: ''\n      };\n      this.availableItems = [];\n      this.existingPCComponents = [];\n      this.categoryError = '';\n      this.submitted = false;\n      this.loading = false;\n    }\n    ngOnInit() {\n      const pcId = this.route.snapshot.params['id'];\n      this.loadPC(pcId);\n      this.loadData();\n      // Listen for stock data changes from other components\n      window.addEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n    }\n    loadData() {\n      this.loadItems();\n      this.loadCategories();\n      this.loadBrands();\n      this.loadStocksForFiltering();\n    }\n    loadStocksForFiltering() {\n      console.log('Loading stocks from API...');\n      this.stockService.getAll().pipe(first()).subscribe({\n        next: stocks => {\n          this.allStocks = stocks;\n          console.log('Loaded stocks for filtering:', stocks.length);\n          // Debug stock data structure\n          if (stocks.length > 0) {\n            const sampleStock = stocks[0];\n            console.log('Sample stock structure:', {\n              id: sampleStock.id,\n              itemId: sampleStock.itemId,\n              locationId: sampleStock.locationId,\n              quantity: sampleStock.quantity,\n              price: sampleStock.price,\n              totalPrice: sampleStock.totalPrice,\n              remarks: sampleStock.remarks,\n              createdAt: sampleStock.createdAt,\n              item: sampleStock.item,\n              location: sampleStock.location\n            });\n            // Log all stock entries for debugging\n            console.log('All stock entries:', stocks.map(s => ({\n              id: s.id,\n              itemId: s.itemId,\n              itemName: s.item?.name || 'No item',\n              locationId: s.locationId,\n              locationName: s.location?.name || 'No location',\n              quantity: s.quantity,\n              price: s.price\n            })));\n          } else {\n            console.log('No stock entries found in database');\n          }\n          // Filter available items if items are already loaded\n          if (this.items.length > 0) {\n            this.filterAvailableItems();\n          } else {\n            console.log('Items not loaded yet, stocks will be used when items are loaded');\n          }\n        },\n        error: error => {\n          this.alertService.error('Error loading stocks: ' + error);\n          console.error('Error loading stocks:', error);\n          console.error('Error details:', error);\n        }\n      });\n    }\n    filterAvailableItems() {\n      if (this.allStocks.length === 0) {\n        console.log('No stocks loaded yet, cannot filter available items');\n        return;\n      }\n      if (this.items.length === 0) {\n        console.log('No items loaded yet, cannot filter available items');\n        return;\n      }\n      console.log('Filtering available items across all locations');\n      console.log('Total stocks loaded:', this.allStocks.length);\n      console.log('Total items loaded:', this.items.length);\n      // NOTE: Stock entries use StorageLocation, but PC uses RoomLocation\n      // For now, we'll show all available stock regardless of location\n      // This allows users to add components from any available stock\n      // Get all stock entries with positive quantities\n      const availableStocks = this.allStocks.filter(stock => stock.quantity > 0);\n      console.log('Available stocks (all locations):', availableStocks.length);\n      console.log('Available stocks details:', availableStocks.map(s => ({\n        id: s.id,\n        itemId: s.itemId,\n        locationId: s.locationId,\n        quantity: s.quantity,\n        price: s.price,\n        item: s.item ? s.item.name : 'No item data'\n      })));\n      // Group by item and calculate available quantities\n      const itemAvailability = new Map();\n      availableStocks.forEach(stock => {\n        const itemId = Number(stock.itemId); // Ensure numeric type\n        if (!itemAvailability.has(itemId)) {\n          itemAvailability.set(itemId, 0);\n        }\n        itemAvailability.set(itemId, itemAvailability.get(itemId) + stock.quantity);\n      });\n      console.log('Item availability map:', itemAvailability);\n      // Filter items that have stock available\n      this.availableItems = this.items.filter(item => {\n        const availableQty = itemAvailability.get(item.id) || 0;\n        const hasStock = availableQty > 0;\n        console.log(`Item ${item.name} (ID: ${item.id}): ${availableQty} available`);\n        return hasStock;\n      });\n      console.log('Available items for PC component:', this.availableItems.length);\n      console.log('Available items:', this.availableItems.map(item => ({\n        id: item.id,\n        name: item.name,\n        category: item.category ? item.category.name : 'No category'\n      })));\n      // Force change detection to update the template\n      setTimeout(() => {\n        console.log('Forcing change detection after filtering items');\n      }, 0);\n    }\n    loadExistingPCComponents() {\n      if (!this.pc) return;\n      // Get ALL PC components globally to calculate accurate available stock\n      this.pcComponentService.getAll().pipe(first()).subscribe({\n        next: components => {\n          this.existingPCComponents = components;\n          console.log('Global PC components loaded:', this.existingPCComponents.length);\n          // Also load current PC components for display\n          this.loadCurrentPCComponents();\n        },\n        error: error => {\n          console.error('Error loading global PC components:', error);\n          this.existingPCComponents = [];\n        }\n      });\n    }\n    loadCurrentPCComponents() {\n      if (!this.pc) return;\n      // Get existing components for this PC from the PC Components table\n      this.pcComponentService.getByPCId(this.pc.id).pipe(first()).subscribe({\n        next: components => {\n          this.components = components;\n          console.log('Current PC components:', this.components);\n        },\n        error: error => {\n          console.error('Error loading current PC components:', error);\n          this.components = [];\n        }\n      });\n    }\n    onItemChange() {\n      console.log('Item changed to:', this.newComponent.itemId);\n      if (this.newComponent.itemId) {\n        // Reset price, total price, and stock ID when item changes\n        this.newComponent.price = null;\n        this.newComponent.totalPrice = null;\n        this.newComponent.stockId = null;\n        // Validate category first\n        this.validateCategory();\n        // Load price from stock immediately when item is selected\n        console.log('Loading price immediately for item:', this.newComponent.itemId);\n        this.loadPriceFromStock();\n      } else {\n        // Reset price, total price, and stock ID when no item is selected\n        this.newComponent.price = null;\n        this.newComponent.totalPrice = null;\n        this.newComponent.stockId = null;\n      }\n    }\n    onPriceInput() {\n      // Recalculate total price when price changes\n      this.calculateTotalPrice();\n    }\n    onQuantityChange() {\n      console.log('onQuantityChange called - current quantity:', this.newComponent.quantity);\n      // Don't validate if quantity is empty or null\n      if (!this.newComponent.quantity || this.newComponent.quantity === null) {\n        console.log('Quantity is empty, skipping validation');\n        return;\n      }\n      // Convert to number and validate\n      const quantity = Number(this.newComponent.quantity);\n      // Only validate if we have a valid item selected\n      if (this.newComponent.itemId && quantity > 0) {\n        // Check if quantity exceeds available stock\n        const availableQuantity = this.getAvailableQuantity(this.newComponent.itemId);\n        console.log('Available quantity:', availableQuantity, 'Requested quantity:', quantity);\n        if (availableQuantity === 0) {\n          console.log('No stock available for this item at this location');\n          this.alertService.error('No stock available for this item at this location.');\n          this.newComponent.quantity = 1; // Reset to 1 instead of empty\n          return;\n        }\n        if (quantity > availableQuantity) {\n          this.alertService.error(`Only ${availableQuantity} units are available in stock.`);\n          this.newComponent.quantity = availableQuantity; // Reset to max available\n          console.log('Quantity reset to:', this.newComponent.quantity);\n          this.calculateTotalPrice(); // Recalculate after reset\n          return;\n        }\n        // Recalculate total price when quantity changes\n        this.calculateTotalPrice();\n      }\n    }\n    getAvailableQuantity(itemId) {\n      if (this.allStocks.length === 0) {\n        console.log('No stocks loaded yet for getAvailableQuantity');\n        return 0;\n      }\n      // Convert itemId to number to ensure type matching\n      const numericItemId = Number(itemId);\n      console.log('Getting available quantity for item:', itemId, 'numeric:', numericItemId, 'across all locations');\n      console.log('Total stocks loaded:', this.allStocks.length);\n      // Calculate total stock for this item (sum of all positive quantities)\n      const itemStocks = this.allStocks.filter(stock => {\n        const stockItemId = Number(stock.itemId);\n        return stockItemId === numericItemId;\n      });\n      console.log('All stock entries for item', itemId, ':', itemStocks.length);\n      // Calculate total stock (sum of all positive quantities)\n      let totalStock = 0;\n      itemStocks.forEach(stock => {\n        if (stock.quantity > 0) {\n          totalStock += stock.quantity;\n        }\n      });\n      // Calculate how much is already used in PC components globally\n      // We need to get this from the backend to get accurate global usage\n      const usedInPCComponents = this.getGlobalPCComponentUsage(numericItemId);\n      // Available quantity = total stock - used in PC components globally\n      const availableQuantity = Math.max(0, totalStock - usedInPCComponents);\n      console.log('Stock calculation for item', itemId, ':', {\n        totalStock,\n        usedInPCComponents,\n        availableQuantity,\n        stockEntries: itemStocks.map(s => ({\n          id: s.id,\n          itemId: s.itemId,\n          quantity: s.quantity,\n          type: s.quantity > 0 ? 'available' : 'empty'\n        }))\n      });\n      return availableQuantity;\n    }\n    // Get global PC component usage for an item (from all PCs, not just current PC)\n    getGlobalPCComponentUsage(itemId) {\n      // For now, we'll use the existing components data\n      // In a more robust implementation, this would fetch from backend\n      const globalUsage = this.existingPCComponents.filter(component => component.itemId === itemId).reduce((total, component) => total + component.quantity, 0);\n      console.log(`Global PC component usage for item ${itemId}: ${globalUsage}`);\n      return globalUsage;\n    }\n    // Add a method to check if stock exists but is zero\n    hasStockButZero(itemId) {\n      if (this.allStocks.length === 0) {\n        return false;\n      }\n      const stockEntries = this.allStocks.filter(stock => stock.itemId === itemId);\n      return stockEntries.length > 0 && stockEntries.every(stock => stock.quantity <= 0);\n    }\n    // Add a method to get stock status for better error messages\n    getStockStatus(itemId) {\n      if (this.allStocks.length === 0) {\n        console.log('No stocks loaded yet for getStockStatus');\n        return {\n          hasStock: false,\n          hasZeroStock: false,\n          availableQty: 0,\n          totalEntries: 0\n        };\n      }\n      // Convert itemId to number to ensure type matching\n      const numericItemId = Number(itemId);\n      // Get all stock entries for this item\n      const stockEntries = this.allStocks.filter(stock => {\n        const stockItemId = Number(stock.itemId);\n        return stockItemId === numericItemId;\n      });\n      // Calculate total stock (sum of all positive quantities)\n      let totalStock = 0;\n      stockEntries.forEach(stock => {\n        if (stock.quantity > 0) {\n          totalStock += stock.quantity;\n        }\n      });\n      // Calculate how much is already used in PC components globally\n      const usedInPCComponents = this.getGlobalPCComponentUsage(numericItemId);\n      // Available quantity = total stock - used in PC components\n      const availableQty = Math.max(0, totalStock - usedInPCComponents);\n      const hasZeroStock = stockEntries.length > 0 && totalStock <= 0;\n      console.log(`getStockStatus for item ${itemId} (numeric: ${numericItemId}):`, {\n        totalStocks: this.allStocks.length,\n        matchingStocks: stockEntries.length,\n        totalStock,\n        usedInPCComponents,\n        availableQty,\n        stockEntries: stockEntries.map(s => ({\n          id: s.id,\n          itemId: s.itemId,\n          quantity: s.quantity,\n          type: s.quantity > 0 ? 'available' : 'empty'\n        }))\n      });\n      const result = {\n        hasStock: stockEntries.length > 0,\n        hasZeroStock,\n        availableQty,\n        totalEntries: stockEntries.length\n      };\n      console.log(`getStockStatus result for item ${itemId}:`, result);\n      return result;\n    }\n    loadPriceFromStock() {\n      if (!this.newComponent.itemId) {\n        console.log('No item selected, skipping price loading');\n        return;\n      }\n      if (this.allStocks.length === 0) {\n        console.log('No stocks loaded yet, cannot load price');\n        return;\n      }\n      // Convert itemId to number to ensure type matching\n      const numericItemId = Number(this.newComponent.itemId);\n      console.log('Loading price for item:', this.newComponent.itemId, 'numeric:', numericItemId);\n      console.log('All stocks available:', this.allStocks.length);\n      // NOTE: Stock entries use StorageLocation, but PC uses RoomLocation\n      // For now, we'll get all stock entries for this item regardless of location\n      // This allows users to add components from any available stock\n      const stockEntries = this.allStocks.filter(stock => {\n        const stockItemId = Number(stock.itemId);\n        return stockItemId === numericItemId && stock.quantity > 0;\n      });\n      console.log('Found stock entries for price loading:', stockEntries.length);\n      console.log('Stock entries details:', stockEntries.map(s => ({\n        id: s.id,\n        itemId: s.itemId,\n        locationId: s.locationId,\n        quantity: s.quantity,\n        price: s.price,\n        remarks: s.remarks,\n        createdAt: s.createdAt\n      })));\n      if (stockEntries.length > 0) {\n        // Sort by creation date (most recent first)\n        stockEntries.sort((a, b) => {\n          const dateA = new Date(a.createdAt || 0);\n          const dateB = new Date(b.createdAt || 0);\n          return dateB.getTime() - dateA.getTime(); // Most recent first\n        });\n        // Use the most recent stock entry's price and store its ID\n        const mostRecentStock = stockEntries[0];\n        this.newComponent.price = mostRecentStock.price;\n        this.newComponent.stockId = mostRecentStock.id; // Store the stock ID\n        console.log('Price auto-filled from stock entry:', {\n          stockId: mostRecentStock.id,\n          stockQuantity: mostRecentStock.quantity,\n          stockPrice: mostRecentStock.price,\n          priceUsed: mostRecentStock.price,\n          itemId: this.newComponent.itemId,\n          locationId: mostRecentStock.locationId,\n          createdAt: mostRecentStock.createdAt\n        });\n        // Calculate total price if quantity is set (should be 1 by default)\n        if (this.newComponent.quantity && this.newComponent.quantity > 0) {\n          this.calculateTotalPrice();\n        } else {\n          // Ensure quantity is set to 1 if not already set\n          this.newComponent.quantity = 1;\n          this.calculateTotalPrice();\n        }\n      } else {\n        console.log('No stock entries found for price loading');\n        console.log('Available stocks for this item:', this.allStocks.filter(stock => {\n          const stockItemId = Number(stock.itemId);\n          return stockItemId === numericItemId;\n        }));\n        this.newComponent.price = null;\n        this.newComponent.totalPrice = null;\n        this.newComponent.stockId = null;\n      }\n    }\n    // Add method to get stock by ID\n    getStockById(stockId) {\n      return this.allStocks.find(stock => stock.id === stockId);\n    }\n    // Add method to get stock data for display\n    getStockData(itemId, locationId) {\n      const numericItemId = Number(itemId);\n      if (locationId) {\n        // If location is specified, filter by both item and location\n        return this.allStocks.filter(stock => {\n          const stockItemId = Number(stock.itemId);\n          return stockItemId === numericItemId && stock.locationId === locationId;\n        });\n      } else {\n        // If no location specified, get all stock entries for this item\n        return this.allStocks.filter(stock => {\n          const stockItemId = Number(stock.itemId);\n          return stockItemId === numericItemId && stock.quantity > 0;\n        });\n      }\n    }\n    // Add method to get stock details for display\n    getStockDetails(itemId, locationId) {\n      const stocks = this.getStockData(itemId, locationId);\n      if (stocks.length > 0) {\n        // Sort by creation date (most recent first)\n        stocks.sort((a, b) => {\n          const dateA = new Date(a.createdAt || 0);\n          const dateB = new Date(b.createdAt || 0);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return stocks[0]; // Return most recent stock entry\n      }\n      return null;\n    }\n    // Add a method to get stock guidance for users\n    getStockGuidance(itemId) {\n      const stockStatus = this.getStockStatus(itemId);\n      if (stockStatus.availableQty > 0) {\n        return `Available: ${stockStatus.availableQty} units across all locations`;\n      } else if (stockStatus.hasStock && stockStatus.hasZeroStock) {\n        return 'Stock exists but quantities are zero. Add stock first.';\n      } else if (stockStatus.hasStock) {\n        return 'Stock entries exist but no available quantity.';\n      } else {\n        return 'No stock entries found across all locations.';\n      }\n    }\n    // Add method to get price source information\n    getPriceSourceInfo() {\n      if (!this.newComponent.stockId || !this.newComponent.price) {\n        return '';\n      }\n      const stock = this.getStockById(this.newComponent.stockId);\n      if (stock) {\n        return `Price from stock #${stock.id} (${stock.location?.name || 'Unknown location'}) - ₱${stock.price}`;\n      }\n      return 'Price from stock data';\n    }\n    // Add a method to navigate to add stock\n    navigateToAddStock() {\n      if (this.newComponent.itemId) {\n        // Navigate to add stock page with pre-filled item\n        this.router.navigate(['/add/stocks'], {\n          queryParams: {\n            itemId: this.newComponent.itemId,\n            returnUrl: this.router.url\n          }\n        });\n      } else {\n        // Navigate to general add stock page\n        this.router.navigate(['/add/stocks']);\n      }\n    }\n    validateCategory() {\n      if (!this.newComponent.itemId) return;\n      const selectedItem = this.items.find(item => item.id === this.newComponent.itemId);\n      if (!selectedItem) return;\n      const selectedCategoryId = selectedItem.categoryId;\n      // Check if this category is already used in existing components\n      const categoryAlreadyUsed = this.existingPCComponents.some(component => {\n        // Check if component has item data directly\n        if (component.item && component.item.categoryId) {\n          return component.item.categoryId === selectedCategoryId;\n        }\n        // Fallback to checking items array\n        const componentItem = this.items.find(item => item.id === component.itemId);\n        return componentItem && componentItem.categoryId === selectedCategoryId;\n      });\n      if (categoryAlreadyUsed) {\n        this.categoryError = `Category \"${selectedItem.category?.name || 'Unknown'}\" is already used in this PC. Only one item per category is allowed.`;\n        this.newComponent.itemId = null; // Reset selection\n      } else {\n        this.categoryError = '';\n      }\n    }\n    calculateTotalPrice() {\n      const price = this.newComponent.price;\n      const qty = this.newComponent.quantity;\n      console.log('Calculating total price:', {\n        price,\n        qty\n      });\n      // Ensure both values are numbers and valid\n      const numPrice = Number(price);\n      const numQty = Number(qty);\n      if (numPrice > 0 && numQty > 0) {\n        this.newComponent.totalPrice = numPrice * numQty;\n        console.log('Total price calculated:', this.newComponent.totalPrice);\n      } else {\n        this.newComponent.totalPrice = null;\n        console.log('Invalid price or quantity, total price set to null');\n      }\n    }\n    loadPC(pcId) {\n      this.pcService.getById(pcId).pipe(first()).subscribe({\n        next: pc => {\n          this.pc = pc;\n          console.log('PC loaded:', pc);\n          console.log('PC location ID:', pc.roomLocationId);\n          // Load components and other data after PC is loaded\n          this.loadComponents(pcId);\n          this.loadExistingPCComponents();\n          // Ensure stocks are loaded before filtering available items\n          if (this.allStocks.length > 0) {\n            this.filterAvailableItems();\n          } else {\n            // If stocks not loaded yet, wait for them\n            this.loadStocksForFiltering();\n          }\n        },\n        error: error => {\n          this.alertService.error('Error loading PC: ' + error);\n          console.error('Error loading PC:', error);\n        }\n      });\n    }\n    loadComponents(pcId) {\n      // Use the new method that loads current PC components\n      this.loadCurrentPCComponents();\n    }\n    loadItems() {\n      this.itemService.getAll().pipe(first()).subscribe({\n        next: items => {\n          this.items = items;\n          // Filter available items if stocks are already loaded\n          if (this.allStocks.length > 0) {\n            this.filterAvailableItems();\n          }\n        },\n        error: error => {\n          this.alertService.error('Error loading items: ' + error);\n        }\n      });\n    }\n    loadCategories() {\n      this.categoryService.getAll().pipe(first()).subscribe({\n        next: categories => {\n          this.categories = categories;\n        },\n        error: error => {\n          this.alertService.error('Error loading categories: ' + error);\n        }\n      });\n    }\n    loadBrands() {\n      this.brandService.getAll().pipe(first()).subscribe({\n        next: brands => {\n          this.brands = brands;\n        },\n        error: error => {\n          this.alertService.error('Error loading brands: ' + error);\n        }\n      });\n    }\n    refreshData() {\n      this.loadExistingPCComponents(); // This will also load current PC components\n      this.alertService.success('Data refreshed successfully');\n    }\n    getItemName(itemId) {\n      const item = this.items.find(i => i.id === itemId);\n      return item ? item.name : 'Unknown Item';\n    }\n    getItemNameFromComponent(component) {\n      if (component.item) {\n        return component.item.name;\n      }\n      return this.getItemName(component.itemId);\n    }\n    getCategoryName(component) {\n      // Check if component has item data directly\n      if (component.item && component.item.category) {\n        return component.item.category.name;\n      }\n      const item = this.items.find(i => i.id === component.itemId);\n      if (!item) return 'Unknown';\n      const category = this.categories.find(c => c.id === item.categoryId);\n      return category ? category.name : 'Unknown Category';\n    }\n    getBrandName(component) {\n      // Check if component has item data directly\n      if (component.item && component.item.brand) {\n        return component.item.brand.name;\n      }\n      const item = this.items.find(i => i.id === component.itemId);\n      if (!item) return 'Unknown';\n      const brand = this.brands.find(b => b.id === item.brandId);\n      return brand ? brand.name : 'Unknown Brand';\n    }\n    getTotalValue() {\n      return this.components.reduce((total, component) => {\n        return total + component.price * component.quantity;\n      }, 0);\n    }\n    getUniqueCategories() {\n      const categoryIds = this.components.map(component => {\n        // Check if component has item data directly\n        if (component.item && component.item.categoryId) {\n          return component.item.categoryId;\n        }\n        // Fallback to checking items array\n        const item = this.items.find(i => i.id === component.itemId);\n        return item ? item.categoryId : null;\n      }).filter(id => id !== null);\n      return [...new Set(categoryIds)].length;\n    }\n    getTotalQuantity() {\n      return this.components.reduce((total, component) => {\n        return total + component.quantity;\n      }, 0);\n    }\n    addComponent() {\n      this.showAddForm = true;\n      this.resetNewComponent();\n      this.loadExistingPCComponents();\n      // Refresh stock data to ensure we have the latest information\n      this.loadStocksForFiltering();\n      // Ensure quantity is properly set to 1\n      setTimeout(() => {\n        this.newComponent.quantity = 1;\n        console.log('Add component - quantity set to:', this.newComponent.quantity);\n      }, 50);\n      console.log('Add component - newComponent initialized:', this.newComponent);\n    }\n    cancelAdd() {\n      this.showAddForm = false;\n      this.resetNewComponent();\n      this.categoryError = '';\n      this.submitted = false;\n      console.log('Form cancelled, newComponent reset');\n    }\n    resetNewComponent() {\n      this.newComponent = {\n        itemId: null,\n        stockId: null,\n        quantity: 1,\n        price: null,\n        totalPrice: null,\n        remarks: ''\n      };\n      this.categoryError = '';\n      this.submitted = false;\n      console.log('Reset newComponent - quantity set to:', this.newComponent.quantity);\n    }\n    saveComponent() {\n      this.submitted = true;\n      console.log('Saving component with data:', this.newComponent);\n      // Validate required fields\n      if (!this.newComponent.itemId) {\n        this.alertService.error('Please select an item');\n        return;\n      }\n      if (!this.newComponent.quantity || this.newComponent.quantity <= 0) {\n        this.alertService.error('Quantity must be greater than 0');\n        return;\n      }\n      if (!this.newComponent.price || this.newComponent.price <= 0) {\n        this.alertService.error('Price must be greater than 0');\n        return;\n      }\n      // Additional validation for PC components\n      if (this.categoryError) {\n        this.alertService.error(this.categoryError);\n        return;\n      }\n      // Final stock validation - check if quantity exceeds available stock\n      const stockStatus = this.getStockStatus(this.newComponent.itemId);\n      if (stockStatus.availableQty === 0) {\n        let errorMessage = '';\n        if (stockStatus.hasStock && stockStatus.hasZeroStock) {\n          errorMessage = 'This item has stock entries but all quantities are zero. Please add stock first.';\n        } else if (stockStatus.hasStock) {\n          errorMessage = 'This item has stock entries but no available quantity. Please check stock records.';\n        } else {\n          errorMessage = 'No stock available for this item across all locations. Please add stock first.';\n        }\n        this.alertService.error(errorMessage);\n        return;\n      }\n      if (this.newComponent.quantity > stockStatus.availableQty) {\n        this.alertService.error(`Only ${stockStatus.availableQty} units are available in stock.`);\n        return;\n      }\n      // Auto-calculate total price before saving\n      this.calculateTotalPrice();\n      // Validate total price\n      if (!this.newComponent.totalPrice || this.newComponent.totalPrice <= 0) {\n        this.alertService.error('Total price calculation failed. Please check price and quantity.');\n        return;\n      }\n      this.loading = true;\n      // Create PC component entry\n      const componentData = {\n        pcId: this.pc.id,\n        itemId: this.newComponent.itemId,\n        quantity: this.newComponent.quantity,\n        price: this.newComponent.price,\n        totalPrice: this.newComponent.totalPrice,\n        status: this.newComponent.status,\n        stockId: this.newComponent.stockId,\n        remarks: this.newComponent.remarks || ''\n      };\n      console.log('Creating PC component with data:', componentData);\n      // Show confirmation dialog about stock deduction\n      const confirmMessage = `Are you sure you want to add this component?\\n\\nThis will deduct ${this.newComponent.quantity} units from the stock quantity, just like disposal.\\n\\nItem: ${this.getItemName(this.newComponent.itemId)}\\nQuantity: ${this.newComponent.quantity}\\nPrice: ₱${this.newComponent.price}`;\n      if (confirm(confirmMessage)) {\n        this.pcComponentService.create(componentData).pipe(first()).subscribe({\n          next: result => {\n            this.loading = false;\n            this.alertService.success(`Component added successfully. Stock quantity reduced by ${this.newComponent.quantity} units.`);\n            this.showAddForm = false;\n            this.resetNewComponent();\n            this.categoryError = '';\n            this.submitted = false;\n            // Refresh stock data and components after adding\n            this.loadStocksForFiltering();\n            this.loadExistingPCComponents(); // This will refresh both global and current components\n            // Notify stock list component to refresh its data\n            this.notifyStockListRefresh();\n          },\n          error: error => {\n            this.loading = false;\n            this.alertService.error('Error adding component: ' + error);\n            console.error('Error adding component:', error);\n          }\n        });\n      } else {\n        this.loading = false;\n      }\n    }\n    viewComponent(id) {\n      this.router.navigate(['/stocks', id]);\n    }\n    editComponent(id) {\n      this.router.navigate(['/stocks', id, 'edit']);\n    }\n    removeComponent(id) {\n      // Find the component to get its details for the confirmation message\n      const component = this.components.find(c => c.id === id);\n      if (!component) {\n        this.alertService.error('Component not found');\n        return;\n      }\n      const confirmMessage = `Are you sure you want to remove this component from the PC?\\n\\nThis will restore ${component.quantity} units back to the stock quantity.\\n\\nItem: ${this.getItemName(component.itemId)}\\nQuantity: ${component.quantity}\\nPrice: ₱${component.price}`;\n      if (confirm(confirmMessage)) {\n        this.pcComponentService.delete(id).pipe(first()).subscribe({\n          next: () => {\n            this.alertService.success(`Component removed successfully. Stock quantity restored by ${component.quantity} units.`);\n            // Refresh stock data and components after removing\n            this.loadStocksForFiltering();\n            this.loadExistingPCComponents(); // This will refresh both global and current components\n            // Notify stock list component to refresh its data\n            this.notifyStockListRefresh();\n          },\n          error: error => {\n            this.alertService.error('Error removing component: ' + error);\n          }\n        });\n      }\n    }\n    returnToStock(id) {\n      // Find the component to get its details for the confirmation message\n      const component = this.components.find(c => c.id === id);\n      if (!component) {\n        this.alertService.error('Component not found');\n        return;\n      }\n      const confirmMessage = `Are you sure you want to return this component back to stock?\\n\\nThis will add ${component.quantity} units back to the global stock quantity.\\n\\nItem: ${this.getItemName(component.itemId)}\\nQuantity: ${component.quantity}\\nPrice: ₱${component.price}`;\n      if (confirm(confirmMessage)) {\n        this.pcComponentService.returnToStock(id).pipe(first()).subscribe({\n          next: () => {\n            this.alertService.success(`Component returned to stock successfully. Stock quantity increased by ${component.quantity} units.`);\n            // Refresh stock data and components after returning to stock\n            this.loadStocksForFiltering();\n            this.loadExistingPCComponents(); // This will refresh both global and current components\n            // Notify stock list component to refresh its data\n            this.notifyStockListRefresh();\n          },\n          error: error => {\n            this.alertService.error('Error returning component to stock: ' + error);\n          }\n        });\n      }\n    }\n    // Method to notify stock list component to refresh its data\n    notifyStockListRefresh() {\n      // Dispatch a custom event that stock list component can listen to\n      const event = new CustomEvent('stockDataChanged', {\n        detail: {\n          timestamp: new Date().getTime(),\n          message: 'PC component added/removed - stock data updated'\n        }\n      });\n      window.dispatchEvent(event);\n      console.log('Stock data change event dispatched');\n    }\n    // Handle stock data changes from other components\n    handleStockDataChange(event) {\n      console.log('Stock data change detected in PC components:', event.detail);\n      console.log('Refreshing PC component stock data...');\n      // Refresh stock data to get updated quantities\n      this.loadStocksForFiltering();\n      // Refresh global PC components to get accurate available stock\n      this.loadExistingPCComponents();\n      // Re-filter available items with updated stock data\n      setTimeout(() => {\n        this.filterAvailableItems();\n      }, 100);\n      // Show a brief notification\n      this.alertService.info('Stock data updated - quantities refreshed');\n    }\n    ngOnDestroy() {\n      // Clean up event listener\n      window.removeEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n    }\n    // Notify PC list component about component status changes\n    notifyComponentStatusChange() {\n      const event = new CustomEvent('componentStatusChanged', {\n        detail: {\n          timestamp: new Date().getTime(),\n          message: 'Component status updated - PC status may need auto-update'\n        }\n      });\n      window.dispatchEvent(event);\n      console.log('Component status change event dispatched');\n    }\n    // Status-related methods\n    updateComponentStatus(component) {\n      console.log('Updating component status:', component.id, 'to:', component.status);\n      this.pcComponentService.update(component.id, {\n        status: component.status\n      }).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success(`Component status updated to ${component.status}`);\n          // Refresh components to get updated data\n          this.loadCurrentPCComponents();\n          // Notify PC list component about status change\n          this.notifyComponentStatusChange();\n        },\n        error: error => {\n          this.alertService.error('Error updating component status: ' + error);\n          console.error('Error updating component status:', error);\n        }\n      });\n    }\n    getStatusClass(status) {\n      switch (status) {\n        case 'Working':\n          return 'form-select-success';\n        case 'Missing':\n          return 'form-select-danger';\n        case 'Not Working':\n          return 'form-select-danger';\n        case 'Maintenance':\n          return 'form-select-warning';\n        default:\n          return '';\n      }\n    }\n    getComponentRowClass(component) {\n      switch (component.status) {\n        case 'Working':\n          return '';\n        case 'Missing':\n          return 'table-danger';\n        case 'Not Working':\n          return 'table-danger';\n        case 'Maintenance':\n          return 'table-warning';\n        default:\n          return '';\n      }\n    }\n    getPCStatus() {\n      if (this.components.length === 0) {\n        return {\n          status: 'No Components',\n          class: 'text-muted',\n          hasIssues: false\n        };\n      }\n      const hasMissing = this.components.some(c => c.status === 'Missing');\n      const hasNotWorking = this.components.some(c => c.status === 'Not Working');\n      const hasMaintenance = this.components.some(c => c.status === 'Maintenance');\n      const allWorking = this.components.every(c => c.status === 'Working');\n      if (hasMissing || hasNotWorking) {\n        return {\n          status: 'Not Working',\n          class: 'text-danger',\n          hasIssues: true\n        };\n      } else if (hasMaintenance) {\n        return {\n          status: 'Maintenance',\n          class: 'text-warning',\n          hasIssues: true\n        };\n      } else if (allWorking) {\n        return {\n          status: 'Working',\n          class: 'text-success',\n          hasIssues: false\n        };\n      } else {\n        return {\n          status: 'Unknown',\n          class: 'text-muted',\n          hasIssues: false\n        };\n      }\n    }\n    static #_ = this.ɵfac = function PCComponentsComponent_Factory(t) {\n      return new (t || PCComponentsComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.PCService), i0.ɵɵdirectiveInject(i2.PCComponentService), i0.ɵɵdirectiveInject(i2.StockService), i0.ɵɵdirectiveInject(i2.ItemService), i0.ɵɵdirectiveInject(i2.CategoryService), i0.ɵɵdirectiveInject(i2.BrandService), i0.ɵɵdirectiveInject(i2.AlertService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PCComponentsComponent,\n      selectors: [[\"app-pc-components\"]],\n      decls: 155,\n      vars: 40,\n      consts: [[\"componentForm\", \"ngForm\"], [1, \"container-fluid\"], [1, \"row\"], [1, \"col-12\"], [1, \"pc-header\", \"mb-4\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-1\"], [1, \"fas\", \"fa-desktop\", \"text-primary\"], [1, \"text-muted\", \"mb-0\"], [1, \"fas\", \"fa-barcode\"], [1, \"badge\", 3, \"ngClass\"], [\"routerLink\", \"/pc\", 1, \"btn\", \"btn-outline-secondary\", \"me-2\"], [1, \"fas\", \"fa-arrow-left\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"fas\", \"fa-plus\"], [1, \"row\", \"mb-4\"], [1, \"card\", \"border-0\", \"shadow-sm\"], [1, \"card-body\"], [1, \"d-flex\", \"align-items-center\"], [1, \"status-indicator\", \"me-3\", 3, \"ngClass\"], [1, \"fas\", 3, \"ngClass\"], [1, \"flex-grow-1\"], [1, \"mb-0\", \"text-muted\"], [\"class\", \"badge badge-danger me-2\", 4, \"ngIf\"], [\"class\", \"badge badge-success me-2\", 4, \"ngIf\"], [1, \"card-header\", \"bg-info\", \"text-white\"], [1, \"mb-0\"], [1, \"fas\", \"fa-info-circle\"], [1, \"col-md-6\"], [1, \"mb-2\"], [1, \"row\", \"text-center\"], [1, \"col-4\"], [1, \"stat-box\"], [1, \"stat-number\", \"text-primary\"], [1, \"stat-label\"], [1, \"stat-number\", \"text-success\"], [1, \"stat-number\", \"text-warning\"], [1, \"alert\", \"alert-warning\", \"mb-2\"], [1, \"fas\", \"fa-exclamation-triangle\"], [1, \"alert\", \"alert-info\", \"mb-0\"], [\"class\", \"row mb-4\", 4, \"ngIf\"], [1, \"card-header\", \"bg-secondary\", \"text-white\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"fas\", \"fa-microchip\"], [1, \"btn\", \"btn-sm\", \"btn-outline-light\", 3, \"click\"], [1, \"fas\", \"fa-sync-alt\"], [1, \"card-body\", \"p-0\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\", \"mb-0\"], [1, \"table-dark\"], [1, \"fas\", \"fa-box\"], [1, \"fas\", \"fa-sort-numeric-up\"], [1, \"fas\", \"fa-dollar-sign\"], [1, \"fas\", \"fa-calculator\"], [1, \"fas\", \"fa-cogs\"], [1, \"fas\", \"fa-tools\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"row\", \"mt-4\"], [1, \"col-md-3\"], [1, \"card\", \"border-0\", \"shadow-sm\", \"stat-card\"], [1, \"card-body\", \"text-center\"], [1, \"stat-icon\", \"bg-primary\", \"text-white\"], [1, \"stat-icon\", \"bg-success\", \"text-white\"], [1, \"stat-icon\", \"bg-info\", \"text-white\"], [1, \"fas\", \"fa-tags\"], [1, \"stat-number\", \"text-info\"], [1, \"stat-icon\", \"bg-warning\", \"text-white\"], [1, \"badge\", \"badge-danger\", \"me-2\"], [1, \"badge\", \"badge-success\", \"me-2\"], [1, \"fas\", \"fa-check-circle\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [3, \"ngSubmit\"], [1, \"col-md-6\", \"mb-3\"], [1, \"form-label\", \"fw-bold\"], [1, \"fas\", \"fa-tag\", \"text-primary\"], [\"name\", \"itemId\", \"required\", \"\", 1, \"form-select\", 3, \"ngModelChange\", \"change\", \"ngModel\", \"ngClass\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [1, \"fas\", \"fa-sort-numeric-up\", \"text-primary\"], [\"type\", \"number\", \"name\", \"quantity\", \"required\", \"\", \"min\", \"1\", \"placeholder\", \"Enter quantity\", 1, \"form-control\", 3, \"ngModelChange\", \"blur\", \"ngModel\", \"max\", \"ngClass\"], [1, \"form-text\", \"text-muted\"], [1, \"col-md-4\", \"mb-3\"], [1, \"fas\", \"fa-dollar-sign\", \"text-primary\"], [\"type\", \"number\", \"name\", \"price\", \"required\", \"\", \"step\", \"0.01\", \"placeholder\", \"Enter price\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\", \"ngClass\"], [1, \"form-text\", 3, \"ngClass\"], [\"class\", \"fas fa-check-circle\", 4, \"ngIf\"], [\"class\", \"fas fa-info-circle\", 4, \"ngIf\"], [1, \"fas\", \"fa-cogs\", \"text-primary\"], [\"name\", \"status\", \"required\", \"\", 1, \"form-select\", 3, \"ngModelChange\", \"ngModel\"], [\"value\", \"Working\"], [\"value\", \"Missing\"], [\"value\", \"Not Working\"], [\"value\", \"Maintenance\"], [1, \"fas\", \"fa-calculator\", \"text-primary\"], [\"type\", \"number\", \"readonly\", \"\", \"placeholder\", \"Auto-calculated\", 1, \"form-control\", 3, \"value\", \"disabled\"], [1, \"d-flex\", \"justify-content-end\", \"gap-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"fas\", \"fa-times\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-2\", 4, \"ngIf\"], [\"class\", \"fas fa-save me-2\", 4, \"ngIf\"], [3, \"value\"], [1, \"invalid-feedback\"], [1, \"mt-3\"], [1, \"alert\", 3, \"ngClass\"], [1, \"fas\", \"fa-database\", \"me-2\"], [1, \"mt-2\", \"p-3\", \"bg-light\", \"border\", \"rounded\"], [1, \"text-muted\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-2\"], [1, \"fas\", \"fa-save\", \"me-2\"], [3, \"ngClass\"], [1, \"component-icon\", \"me-2\"], [1, \"fas\", \"fa-microchip\", \"text-primary\"], [\"class\", \"text-muted\", 4, \"ngIf\"], [1, \"badge\", \"bg-primary\"], [1, \"text-success\", \"fw-bold\"], [1, \"text-info\", \"fw-bold\"], [1, \"form-select\", \"form-select-sm\", 3, \"ngModelChange\", \"change\", \"ngModel\", \"ngClass\"], [\"role\", \"group\", 1, \"btn-group\"], [\"type\", \"button\", \"title\", \"Return to Stock\", 1, \"btn\", \"btn-sm\", \"btn-outline-warning\", 3, \"click\"], [1, \"fas\", \"fa-undo\"], [\"type\", \"button\", \"title\", \"Remove Component\", 1, \"btn\", \"btn-sm\", \"btn-outline-danger\", 3, \"click\"], [1, \"fas\", \"fa-trash\"], [\"colspan\", \"6\", 1, \"text-center\", \"py-5\"], [1, \"empty-state\"], [1, \"fas\", \"fa-microchip\", \"fa-3x\", \"text-muted\", \"mb-3\"]],\n      template: function PCComponentsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\", 4)(4, \"div\", 5)(5, \"div\")(6, \"h2\", 6);\n          i0.ɵɵelement(7, \"i\", 7);\n          i0.ɵɵtext(8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"p\", 8);\n          i0.ɵɵelement(10, \"i\", 9);\n          i0.ɵɵtext(11);\n          i0.ɵɵelementStart(12, \"span\", 10);\n          i0.ɵɵtext(13);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"div\")(15, \"a\", 11);\n          i0.ɵɵelement(16, \"i\", 12);\n          i0.ɵɵtext(17, \" Back to PCs \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function PCComponentsComponent_Template_button_click_18_listener() {\n            return ctx.addComponent();\n          });\n          i0.ɵɵelement(19, \"i\", 14);\n          i0.ɵɵtext(20, \" Add Component \");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(21, \"div\", 15)(22, \"div\", 3)(23, \"div\", 16)(24, \"div\", 17)(25, \"div\", 18)(26, \"div\", 19);\n          i0.ɵɵelement(27, \"i\", 20);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"div\", 21)(29, \"h5\", 6);\n          i0.ɵɵtext(30);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"p\", 22);\n          i0.ɵɵtemplate(32, PCComponentsComponent_span_32_Template, 3, 0, \"span\", 23)(33, PCComponentsComponent_span_33_Template, 3, 0, \"span\", 24);\n          i0.ɵɵtext(34);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(35, \"div\", 15)(36, \"div\", 3)(37, \"div\", 16)(38, \"div\", 25)(39, \"h6\", 26);\n          i0.ɵɵelement(40, \"i\", 27);\n          i0.ɵɵtext(41, \" Stock-Based Component System \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(42, \"div\", 17)(43, \"div\", 2)(44, \"div\", 28)(45, \"p\", 29)(46, \"strong\");\n          i0.ɵɵtext(47, \"How it works:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(48, \" Only items with available stock quantities can be added as components. \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(49, \"div\", 30)(50, \"div\", 31)(51, \"div\", 32)(52, \"div\", 33);\n          i0.ɵɵtext(53);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(54, \"div\", 34);\n          i0.ɵɵtext(55, \"Available Items\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(56, \"div\", 31)(57, \"div\", 32)(58, \"div\", 35);\n          i0.ɵɵtext(59);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(60, \"div\", 34);\n          i0.ɵɵtext(61, \"Total Stocks\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(62, \"div\", 31)(63, \"div\", 32)(64, \"div\", 36);\n          i0.ɵɵtext(65);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(66, \"div\", 34);\n          i0.ɵɵtext(67, \"Available Stocks\");\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(68, \"div\", 28)(69, \"div\", 37);\n          i0.ɵɵelement(70, \"i\", 38);\n          i0.ɵɵelementStart(71, \"strong\");\n          i0.ɵɵtext(72, \"Stock Deduction:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(73, \" Adding components will deduct from stock quantities, just like disposal. \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(74, \"div\", 39);\n          i0.ɵɵelement(75, \"i\", 27);\n          i0.ɵɵelementStart(76, \"strong\");\n          i0.ɵɵtext(77, \"Debug Info:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(78);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵtemplate(79, PCComponentsComponent_div_79_Template, 71, 35, \"div\", 40);\n          i0.ɵɵelementStart(80, \"div\", 2)(81, \"div\", 3)(82, \"div\", 16)(83, \"div\", 41)(84, \"h5\", 26);\n          i0.ɵɵelement(85, \"i\", 42);\n          i0.ɵɵtext(86, \" Current Components \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(87, \"div\")(88, \"button\", 43);\n          i0.ɵɵlistener(\"click\", function PCComponentsComponent_Template_button_click_88_listener() {\n            return ctx.refreshData();\n          });\n          i0.ɵɵelement(89, \"i\", 44);\n          i0.ɵɵtext(90, \" Refresh \");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(91, \"div\", 45)(92, \"div\", 46)(93, \"table\", 47)(94, \"thead\", 48)(95, \"tr\")(96, \"th\");\n          i0.ɵɵelement(97, \"i\", 49);\n          i0.ɵɵtext(98, \" Item\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(99, \"th\");\n          i0.ɵɵelement(100, \"i\", 50);\n          i0.ɵɵtext(101, \" Quantity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(102, \"th\");\n          i0.ɵɵelement(103, \"i\", 51);\n          i0.ɵɵtext(104, \" Price\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(105, \"th\");\n          i0.ɵɵelement(106, \"i\", 52);\n          i0.ɵɵtext(107, \" Total\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(108, \"th\");\n          i0.ɵɵelement(109, \"i\", 53);\n          i0.ɵɵtext(110, \" Status\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(111, \"th\");\n          i0.ɵɵelement(112, \"i\", 54);\n          i0.ɵɵtext(113, \" Actions\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(114, \"tbody\");\n          i0.ɵɵtemplate(115, PCComponentsComponent_tr_115_Template, 37, 14, \"tr\", 55)(116, PCComponentsComponent_tr_116_Template, 11, 0, \"tr\", 56);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(117, \"div\", 57)(118, \"div\", 58)(119, \"div\", 59)(120, \"div\", 60)(121, \"div\", 61);\n          i0.ɵɵelement(122, \"i\", 42);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(123, \"div\", 33);\n          i0.ɵɵtext(124);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(125, \"div\", 34);\n          i0.ɵɵtext(126, \"Total Components\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(127, \"div\", 58)(128, \"div\", 59)(129, \"div\", 60)(130, \"div\", 62);\n          i0.ɵɵelement(131, \"i\", 51);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(132, \"div\", 35);\n          i0.ɵɵtext(133);\n          i0.ɵɵpipe(134, \"number\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(135, \"div\", 34);\n          i0.ɵɵtext(136, \"Total Value\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(137, \"div\", 58)(138, \"div\", 59)(139, \"div\", 60)(140, \"div\", 63);\n          i0.ɵɵelement(141, \"i\", 64);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(142, \"div\", 65);\n          i0.ɵɵtext(143);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(144, \"div\", 34);\n          i0.ɵɵtext(145, \"Categories\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(146, \"div\", 58)(147, \"div\", 59)(148, \"div\", 60)(149, \"div\", 66);\n          i0.ɵɵelement(150, \"i\", 50);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(151, \"div\", 36);\n          i0.ɵɵtext(152);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(153, \"div\", 34);\n          i0.ɵɵtext(154, \"Total Items\");\n          i0.ɵɵelementEnd()()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵtextInterpolate1(\" \", (ctx.pc == null ? null : ctx.pc.name) || \"PC Components\", \" \");\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\" \", (ctx.pc == null ? null : ctx.pc.serialNumber) || \"No Serial\", \" | \");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(25, _c0, (ctx.pc == null ? null : ctx.pc.status) === \"Active\", (ctx.pc == null ? null : ctx.pc.status) === \"Maintenance\", (ctx.pc == null ? null : ctx.pc.status) === \"Inactive\", (ctx.pc == null ? null : ctx.pc.status) === \"Retired\"));\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate((ctx.pc == null ? null : ctx.pc.status) || \"Unknown\");\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(30, _c1, ctx.getPCStatus().class === \"text-success\", ctx.getPCStatus().class === \"text-warning\", ctx.getPCStatus().class === \"text-danger\", ctx.getPCStatus().class === \"text-muted\"));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(35, _c2, ctx.getPCStatus().class === \"text-success\", ctx.getPCStatus().class === \"text-warning\", ctx.getPCStatus().class === \"text-danger\", ctx.getPCStatus().class === \"text-muted\"));\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"PC Status: \", ctx.getPCStatus().status, \"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.getPCStatus().hasIssues);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.getPCStatus().hasIssues && ctx.components.length > 0);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.components.length, \" components installed \");\n          i0.ɵɵadvance(19);\n          i0.ɵɵtextInterpolate(ctx.availableItems.length);\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate(ctx.allStocks.length);\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate(ctx.availableStocksCount);\n          i0.ɵɵadvance(13);\n          i0.ɵɵtextInterpolate2(\" Stock data: \", ctx.allStocks.length > 0 ? \"Loaded\" : \"Not loaded\", \" | Items: \", ctx.items.length > 0 ? \"Loaded\" : \"Not loaded\", \" \");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.showAddForm);\n          i0.ɵɵadvance(36);\n          i0.ɵɵproperty(\"ngForOf\", ctx.components);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.components.length === 0);\n          i0.ɵɵadvance(8);\n          i0.ɵɵtextInterpolate(ctx.components.length);\n          i0.ɵɵadvance(9);\n          i0.ɵɵtextInterpolate1(\"\\u20B1\", i0.ɵɵpipeBind2(134, 22, ctx.getTotalValue(), \"1.0-0\"), \"\");\n          i0.ɵɵadvance(10);\n          i0.ɵɵtextInterpolate(ctx.getUniqueCategories());\n          i0.ɵɵadvance(9);\n          i0.ɵɵtextInterpolate(ctx.getTotalQuantity());\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.MinValidator, i4.MaxValidator, i4.NgModel, i4.NgForm, i1.RouterLink, i3.DecimalPipe],\n      styles: [\".pc-header[_ngcontent-%COMP%]{background:linear-gradient(135deg,#667eea,#764ba2);color:#fff;padding:2rem;border-radius:10px;margin-bottom:2rem}.pc-header[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{color:#fff;margin-bottom:.5rem}.pc-header[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{color:#fffc}.status-indicator[_ngcontent-%COMP%]{width:60px;height:60px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-size:1.5rem}.status-working[_ngcontent-%COMP%]{background:linear-gradient(135deg,#28a745,#20c997);color:#fff}.status-warning[_ngcontent-%COMP%]{background:linear-gradient(135deg,#ffc107,#fd7e14);color:#fff}.status-danger[_ngcontent-%COMP%]{background:linear-gradient(135deg,#dc3545,#e83e8c);color:#fff}.status-info[_ngcontent-%COMP%]{background:linear-gradient(135deg,#17a2b8,#6f42c1);color:#fff}.stat-box[_ngcontent-%COMP%]{padding:1rem;border-radius:8px;background:#f8f9fa;border:1px solid #e9ecef}.stat-number[_ngcontent-%COMP%]{font-size:2rem;font-weight:700;margin-bottom:.5rem}.stat-label[_ngcontent-%COMP%]{font-size:.9rem;color:#6c757d;text-transform:uppercase;letter-spacing:.5px}.stat-card[_ngcontent-%COMP%]{transition:transform .2s ease-in-out}.stat-card[_ngcontent-%COMP%]:hover{transform:translateY(-5px)}.stat-icon[_ngcontent-%COMP%]{width:60px;height:60px;border-radius:50%;display:flex;align-items:center;justify-content:center;font-size:1.5rem;margin:0 auto 1rem}.component-icon[_ngcontent-%COMP%]{width:40px;height:40px;background:#f8f9fa;border-radius:50%;display:flex;align-items:center;justify-content:center;color:#007bff}.form-select-success[_ngcontent-%COMP%]{border-color:#28a745!important;color:#28a745!important;background-color:#28a7451a!important}.form-select-danger[_ngcontent-%COMP%]{border-color:#dc3545!important;color:#dc3545!important;background-color:#dc35451a!important}.form-select-warning[_ngcontent-%COMP%]{border-color:#ffc107!important;color:#856404!important;background-color:#ffc1071a!important}.table-danger[_ngcontent-%COMP%]{background-color:#dc35451a!important}.table-warning[_ngcontent-%COMP%]{background-color:#ffc1071a!important}.empty-state[_ngcontent-%COMP%]{padding:3rem;text-align:center}.empty-state[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{color:#6c757d;margin-bottom:1rem}.card[_ngcontent-%COMP%]{border:none;box-shadow:0 .125rem .25rem #00000013;transition:box-shadow .15s ease-in-out}.card[_ngcontent-%COMP%]:hover{box-shadow:0 .5rem 1rem #00000026}.card-header[_ngcontent-%COMP%]{border-bottom:1px solid rgba(0,0,0,.125)}.table[_ngcontent-%COMP%]{margin-bottom:0}.table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{border-top:none;font-weight:600;text-transform:uppercase;font-size:.8rem;letter-spacing:.5px}.table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{vertical-align:middle;border-top:1px solid #dee2e6}.btn-group[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{margin-right:.25rem}.btn-group[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:last-child{margin-right:0}.alert[_ngcontent-%COMP%]{border:none;border-radius:8px}.form-control[_ngcontent-%COMP%], .form-select[_ngcontent-%COMP%]{border-radius:8px;border:1px solid #ced4da;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}.form-control[_ngcontent-%COMP%]:focus, .form-select[_ngcontent-%COMP%]:focus{border-color:#80bdff;box-shadow:0 0 0 .2rem #007bff40}.badge[_ngcontent-%COMP%]{font-size:.75rem;padding:.375rem .75rem;border-radius:6px}.btn[_ngcontent-%COMP%]{border-radius:8px;font-weight:500;padding:.5rem 1rem;transition:all .15s ease-in-out}.btn[_ngcontent-%COMP%]:hover{transform:translateY(-1px)}.gap-2[_ngcontent-%COMP%]{gap:.5rem!important}.me-2[_ngcontent-%COMP%]{margin-right:.5rem!important}.me-3[_ngcontent-%COMP%]{margin-right:1rem!important}.mb-1[_ngcontent-%COMP%]{margin-bottom:.25rem!important}.mb-2[_ngcontent-%COMP%]{margin-bottom:.5rem!important}.mb-3[_ngcontent-%COMP%]{margin-bottom:1rem!important}.mb-4[_ngcontent-%COMP%]{margin-bottom:1.5rem!important}.mb-5[_ngcontent-%COMP%]{margin-bottom:3rem!important}.mt-2[_ngcontent-%COMP%]{margin-top:.5rem!important}.mt-3[_ngcontent-%COMP%]{margin-top:1rem!important}.mt-4[_ngcontent-%COMP%]{margin-top:1.5rem!important}.py-2[_ngcontent-%COMP%]{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-3[_ngcontent-%COMP%]{padding-top:1rem!important;padding-bottom:1rem!important}.py-5[_ngcontent-%COMP%]{padding-top:3rem!important;padding-bottom:3rem!important}.p-0[_ngcontent-%COMP%]{padding:0!important}.p-3[_ngcontent-%COMP%]{padding:1rem!important}.text-center[_ngcontent-%COMP%]{text-align:center!important}.text-muted[_ngcontent-%COMP%]{color:#6c757d!important}.text-primary[_ngcontent-%COMP%]{color:#007bff!important}.text-success[_ngcontent-%COMP%]{color:#28a745!important}.text-info[_ngcontent-%COMP%]{color:#17a2b8!important}.text-warning[_ngcontent-%COMP%]{color:#ffc107!important}.text-danger[_ngcontent-%COMP%]{color:#dc3545!important}.bg-primary[_ngcontent-%COMP%]{background-color:#007bff!important}.bg-secondary[_ngcontent-%COMP%]{background-color:#6c757d!important}.bg-success[_ngcontent-%COMP%]{background-color:#28a745!important}.bg-info[_ngcontent-%COMP%]{background-color:#17a2b8!important}.bg-warning[_ngcontent-%COMP%]{background-color:#ffc107!important}.bg-danger[_ngcontent-%COMP%]{background-color:#dc3545!important}.bg-light[_ngcontent-%COMP%]{background-color:#f8f9fa!important}.text-white[_ngcontent-%COMP%]{color:#fff!important}.border-0[_ngcontent-%COMP%]{border:0!important}.border[_ngcontent-%COMP%]{border:1px solid #dee2e6!important}.border-success[_ngcontent-%COMP%]{border-color:#28a745!important}.border-warning[_ngcontent-%COMP%]{border-color:#ffc107!important}.rounded[_ngcontent-%COMP%]{border-radius:.375rem!important}.shadow-sm[_ngcontent-%COMP%]{box-shadow:0 .125rem .25rem #00000013!important}.fw-bold[_ngcontent-%COMP%]{font-weight:700!important}.d-flex[_ngcontent-%COMP%]{display:flex!important}.align-items-center[_ngcontent-%COMP%]{align-items:center!important}.justify-content-between[_ngcontent-%COMP%]{justify-content:space-between!important}.justify-content-end[_ngcontent-%COMP%]{justify-content:flex-end!important}.flex-grow-1[_ngcontent-%COMP%]{flex-grow:1!important}.table-responsive[_ngcontent-%COMP%]{overflow-x:auto}.table-hover[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover{background-color:#007bff0d}.btn-outline-light[_ngcontent-%COMP%]{color:#f8f9fa;border-color:#f8f9fa}.btn-outline-light[_ngcontent-%COMP%]:hover{color:#212529;background-color:#f8f9fa;border-color:#f8f9fa}.btn-outline-secondary[_ngcontent-%COMP%]{color:#6c757d;border-color:#6c757d}.btn-outline-secondary[_ngcontent-%COMP%]:hover{color:#fff;background-color:#6c757d;border-color:#6c757d}.btn-outline-warning[_ngcontent-%COMP%]{color:#ffc107;border-color:#ffc107}.btn-outline-warning[_ngcontent-%COMP%]:hover{color:#212529;background-color:#ffc107;border-color:#ffc107}.btn-outline-danger[_ngcontent-%COMP%]{color:#dc3545;border-color:#dc3545}.btn-outline-danger[_ngcontent-%COMP%]:hover{color:#fff;background-color:#dc3545;border-color:#dc3545}.form-select-sm[_ngcontent-%COMP%]{padding:.25rem .5rem;font-size:.875rem;border-radius:.375rem}.spinner-border-sm[_ngcontent-%COMP%]{width:1rem;height:1rem}.fa-3x[_ngcontent-%COMP%]{font-size:3em}.fa-2x[_ngcontent-%COMP%]{font-size:2em}.fa-1x[_ngcontent-%COMP%]{font-size:1em}.container-fluid[_ngcontent-%COMP%]{padding:2rem}@media (max-width: 768px){.container-fluid[_ngcontent-%COMP%], .pc-header[_ngcontent-%COMP%]{padding:1rem}.stat-box[_ngcontent-%COMP%]{margin-bottom:1rem}.btn-group[_ngcontent-%COMP%]{display:flex;flex-direction:column}.btn-group[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{margin-bottom:.25rem}}.component-row[_ngcontent-%COMP%]{transition:all .3s ease}.component-row[_ngcontent-%COMP%]:hover{background-color:#f8f9fa;transform:scale(1.01)}.item-info[_ngcontent-%COMP%]{display:flex;flex-direction:column}.category-badge[_ngcontent-%COMP%], .brand-badge[_ngcontent-%COMP%]{display:inline-block;padding:4px 8px;border-radius:12px;font-size:.8rem;font-weight:500;background:#667eea1a;color:#667eea}.quantity-badge[_ngcontent-%COMP%]{padding:6px 12px;border-radius:20px;font-size:.9rem;font-weight:600;background:#28a7451a;color:#28a745}.price-value[_ngcontent-%COMP%]{font-weight:600;color:#333}.date-value[_ngcontent-%COMP%]{font-size:.9rem;color:#666}.action-buttons[_ngcontent-%COMP%]{display:flex;gap:5px;flex-wrap:wrap}.action-buttons[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{padding:6px 10px;font-size:.8rem}.form-label[_ngcontent-%COMP%]{font-weight:600;color:#495057;margin-bottom:.5rem}.form-text[_ngcontent-%COMP%]{font-size:.875rem}.invalid-feedback[_ngcontent-%COMP%]{display:block;width:100%;margin-top:.25rem;font-size:.875rem;color:#dc3545}.table-dark[_ngcontent-%COMP%]{background-color:#343a40;color:#fff}.table-dark[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{border-color:#454d55}.btn-primary[_ngcontent-%COMP%]{background:linear-gradient(135deg,#007bff,#0056b3);border:none}.btn-primary[_ngcontent-%COMP%]:hover{background:linear-gradient(135deg,#0056b3,#004085)}.btn-success[_ngcontent-%COMP%]{background:linear-gradient(135deg,#28a745,#1e7e34);border:none}.btn-success[_ngcontent-%COMP%]:hover{background:linear-gradient(135deg,#1e7e34,#155724)}@keyframes _ngcontent-%COMP%_statusChange{0%{transform:scale(1)}50%{transform:scale(1.05)}to{transform:scale(1)}}.status-indicator[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_statusChange .3s ease-in-out}.card-header.bg-primary[_ngcontent-%COMP%]{background:linear-gradient(135deg,#007bff,#0056b3)!important}.card-header.bg-secondary[_ngcontent-%COMP%]{background:linear-gradient(135deg,#6c757d,#545b62)!important}.card-header.bg-info[_ngcontent-%COMP%]{background:linear-gradient(135deg,#17a2b8,#138496)!important}\"]\n    });\n  }\n  return PCComponentsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}