{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { WorkflowType, WorkflowStatus } from '@app/_models/workflow-type.enum';\nlet WorkflowFormComponent = class WorkflowFormComponent {\n  constructor(formBuilder, workflowService, alertService, accountService) {\n    this.formBuilder = formBuilder;\n    this.workflowService = workflowService;\n    this.alertService = alertService;\n    this.accountService = accountService;\n    this.saved = new EventEmitter();\n    this.cancelled = new EventEmitter();\n    this.loading = false;\n    this.submitted = false;\n    this.isEditMode = false;\n    this.workflowTypes = Object.values(WorkflowType);\n    this.workflowStatuses = Object.values(WorkflowStatus);\n  }\n  ngOnInit() {\n    console.log('WorkflowFormComponent initialized:', {\n      employeeId: this.employeeId,\n      workflow: this.workflow\n    });\n    if (!this.employeeId) {\n      console.error('No employeeId provided to WorkflowFormComponent');\n      return;\n    }\n    this.isEditMode = !!this.workflow;\n    console.log('Form mode:', this.isEditMode ? 'Edit' : 'Create');\n    this.form = this.formBuilder.group({\n      type: ['', Validators.required],\n      details: ['', Validators.required],\n      status: [this.isEditMode ? this.workflow.status : WorkflowStatus.PENDING],\n      comment: ['']\n    });\n    if (this.isEditMode) {\n      console.log('Patching form with workflow data:', this.workflow);\n      this.form.patchValue({\n        type: this.workflow.type,\n        details: this.workflow.details,\n        status: this.workflow.status\n      });\n    }\n  }\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    console.log('Form submitted:', this.form.value);\n    this.submitted = true;\n    this.alertService.clear();\n    if (this.form.invalid) {\n      console.log('Form is invalid:', this.form.errors);\n      return;\n    }\n    this.loading = true;\n    const workflowData = {\n      ...this.form.value,\n      employeeId: this.employeeId,\n      dateUpdated: new Date().toISOString()\n    };\n    console.log('Submitting workflow data:', workflowData);\n    if (this.isEditMode) {\n      this.updateWorkflow(workflowData);\n    } else {\n      workflowData.dateCreated = new Date().toISOString();\n      this.createWorkflow(workflowData);\n    }\n  }\n  createWorkflow(workflowData) {\n    console.log('Creating workflow:', workflowData);\n    this.workflowService.create(workflowData).subscribe({\n      next: workflow => {\n        console.log('Workflow created successfully:', workflow);\n        this.alertService.success('Workflow created successfully');\n        this.saved.emit(workflow);\n      },\n      error: error => {\n        console.error('Error creating workflow:', error);\n        this.alertService.error(error?.error?.message || 'Error creating workflow');\n        this.loading = false;\n      }\n    });\n  }\n  updateWorkflow(workflowData) {\n    console.log('Updating workflow:', workflowData);\n    const comment = this.form.value.comment;\n    if (comment) {\n      console.log('Adding comment:', comment);\n      this.addComment(comment);\n    }\n    this.workflowService.update(this.workflow.id, workflowData).subscribe({\n      next: workflow => {\n        console.log('Workflow updated successfully:', workflow);\n        this.alertService.success('Workflow updated successfully');\n        this.saved.emit(workflow);\n      },\n      error: error => {\n        console.error('Error updating workflow:', error);\n        this.alertService.error(error?.error?.message || 'Error updating workflow');\n        this.loading = false;\n      }\n    });\n  }\n  addComment(comment) {\n    console.log('Adding comment to workflow:', comment);\n    const currentUser = this.accountService.accountValue;\n    const workflowComment = {\n      id: new Date().getTime().toString(),\n      workflowId: this.workflow.id,\n      userId: currentUser.id,\n      userName: `${currentUser.firstName} ${currentUser.lastName}`,\n      comment: comment,\n      dateCreated: new Date().toISOString()\n    };\n    console.log('Created workflow comment:', workflowComment);\n    if (!this.workflow.comments) {\n      this.workflow.comments = [];\n    }\n    this.workflow.comments.push(workflowComment);\n  }\n  onCancel() {\n    console.log('Form cancelled');\n    this.cancelled.emit();\n  }\n};\n__decorate([Input()], WorkflowFormComponent.prototype, \"employeeId\", void 0);\n__decorate([Input()], WorkflowFormComponent.prototype, \"workflow\", void 0);\n__decorate([Output()], WorkflowFormComponent.prototype, \"saved\", void 0);\n__decorate([Output()], WorkflowFormComponent.prototype, \"cancelled\", void 0);\nWorkflowFormComponent = __decorate([Component({\n  selector: 'app-workflow-form',\n  template: `\n        <div class=\"workflow-form\">\n            <h4>{{isEditMode ? 'Edit' : 'Create'}} Workflow</h4>\n            <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"form-group\">\n                    <label for=\"type\">Type</label>\n                    <select formControlName=\"type\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.type.errors }\">\n                        <option value=\"\">Select Type</option>\n                        <option *ngFor=\"let type of workflowTypes\" [value]=\"type\">{{type}}</option>\n                    </select>\n                    <div *ngIf=\"submitted && f.type.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.type.errors.required\">Type is required</div>\n                    </div>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"details\">Details</label>\n                    <textarea formControlName=\"details\" class=\"form-control\" rows=\"3\" [ngClass]=\"{ 'is-invalid': submitted && f.details.errors }\"></textarea>\n                    <div *ngIf=\"submitted && f.details.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.details.errors.required\">Details are required</div>\n                    </div>\n                </div>\n\n                <div class=\"form-group\" *ngIf=\"isEditMode\">\n                    <label for=\"status\">Status</label>\n                    <select formControlName=\"status\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.status.errors }\">\n                        <option *ngFor=\"let status of workflowStatuses\" [value]=\"status\">{{status}}</option>\n                    </select>\n                </div>\n\n                <div class=\"form-group\" *ngIf=\"isEditMode\">\n                    <label for=\"comment\">Add Comment</label>\n                    <textarea formControlName=\"comment\" class=\"form-control\" rows=\"2\"></textarea>\n                </div>\n\n                <div class=\"form-group\">\n                    <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                        <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                        {{isEditMode ? 'Update' : 'Create'}}\n                    </button>\n                    <button type=\"button\" class=\"btn btn-link\" (click)=\"onCancel()\">Cancel</button>\n                </div>\n            </form>\n\n            <div *ngIf=\"workflow?.comments?.length\" class=\"mt-4\">\n                <h5>Comments</h5>\n                <div class=\"comment-list\">\n                    <div *ngFor=\"let comment of workflow.comments\" class=\"comment\">\n                        <div class=\"comment-header\">\n                            <strong>{{comment.userName}}</strong>\n                            <small class=\"text-muted\">{{comment.dateCreated | date:'short'}}</small>\n                        </div>\n                        <div class=\"comment-body\">{{comment.comment}}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n  styles: [`\n        .workflow-form {\n            padding: 1rem;\n            background: #fff;\n            border-radius: 4px;\n            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n        .form-group {\n            margin-bottom: 1rem;\n        }\n        .comment-list {\n            max-height: 300px;\n            overflow-y: auto;\n        }\n        .comment {\n            padding: 0.5rem;\n            border-bottom: 1px solid #eee;\n        }\n        .comment-header {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 0.25rem;\n        }\n        .comment-body {\n            color: #666;\n        }\n    `]\n})], WorkflowFormComponent);\nexport { WorkflowFormComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}