{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { NavigationStart } from '@angular/router';\nimport { AlertType } from '@app/_models';\nlet AlertComponent = class AlertComponent {\n  constructor(router, alertService) {\n    this.router = router;\n    this.alertService = alertService;\n    this.id = 'default-alert';\n    this.fade = true;\n    this.alerts = [];\n  }\n  ngOnInit() {\n    // subscribe to new alert notifications\n    this.alertSubscription = this.alertService.onAlert(this.id).subscribe(alert => {\n      // clear alerts when an empty alert is received\n      if (!alert.message) {\n        // filter out alerts without 'keepAfterRouteChange' flag\n        this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);\n        // remove 'keepAfterRouteChange' flag on the rest\n        this.alerts.forEach(x => delete x.keepAfterRouteChange);\n        return;\n      }\n      // add alert to array\n      this.alerts.push(alert);\n      // auto close alert after 30 seconds\n      if (alert.autoClose) {\n        setTimeout(() => this.removeAlert(alert), 30000);\n      }\n    });\n    // clear alerts on location change\n    this.routeSubscription = this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        this.alertService.clear(this.id);\n      }\n    });\n  }\n  ngOnDestroy() {\n    // unsubscribe to avoid memory leaks\n    this.alertSubscription?.unsubscribe();\n    this.routeSubscription?.unsubscribe();\n  }\n  removeAlert(alert) {\n    // check if already removed to prevent error on auto close\n    if (!this.alerts.includes(alert)) return;\n    if (this.fade) {\n      // fade out alert\n      alert.fade = true;\n      // remove alert after faded out\n      setTimeout(() => {\n        this.alerts = this.alerts.filter(x => x !== alert);\n      }, 1000);\n    } else {\n      // remove alert\n      this.alerts = this.alerts.filter(x => x !== alert);\n    }\n  }\n  cssClasses(alert) {\n    if (!alert) return;\n    const classes = ['alert', 'alert-dismissable'];\n    const alertTypeClass = {\n      [AlertType.Success]: 'alert-success',\n      [AlertType.Error]: 'alert-danger',\n      [AlertType.Info]: 'alert-info',\n      [AlertType.Warning]: 'alert-warning'\n    };\n    classes.push(alertTypeClass[alert.type]);\n    if (alert.fade) {\n      classes.push('fade');\n    }\n    return classes.join(' ');\n  }\n};\n__decorate([Input()], AlertComponent.prototype, \"id\", void 0);\n__decorate([Input()], AlertComponent.prototype, \"fade\", void 0);\nAlertComponent = __decorate([Component({\n  selector: 'alert',\n  templateUrl: 'alert.component.html',\n  styles: [`\n        .alert {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            z-index: 9999;\n            min-width: 300px;\n            padding: 15px;\n            margin-bottom: 10px;\n            border-radius: 4px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n            animation: slideIn 1s ease-out;\n        }\n        .alert.fade {\n            animation: slideIn 1s ease-out, fadeOut 1s ease-out 29s forwards;\n        }\n        @keyframes slideIn {\n            from { transform: translateX(100%); opacity: 0; }\n            to { transform: translateX(0); opacity: 1; }\n        }\n        @keyframes fadeOut {\n            from { opacity: 1; }\n            to { opacity: 0; }\n        }\n        .alert-success {\n            background-color: #d4edda;\n            border-color: #c3e6cb;\n            color: #155724;\n        }\n        .alert-danger {\n            background-color: #f8d7da;\n            border-color: #f5c6cb;\n            color: #721c24;\n        }\n        .alert-info {\n            background-color: #d1ecf1;\n            border-color: #bee5eb;\n            color: #0c5460;\n        }\n        .alert-warning {\n            background-color: #fff3cd;\n            border-color: #ffeeba;\n            color: #856404;\n        }\n        .close {\n            float: right;\n            font-size: 1.5rem;\n            font-weight: 700;\n            line-height: 1;\n            color: #000;\n            text-shadow: 0 1px 0 #fff;\n            opacity: .5;\n            cursor: pointer;\n        }\n        .close:hover {\n            opacity: .75;\n        }\n    `]\n})], AlertComponent);\nexport { AlertComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}