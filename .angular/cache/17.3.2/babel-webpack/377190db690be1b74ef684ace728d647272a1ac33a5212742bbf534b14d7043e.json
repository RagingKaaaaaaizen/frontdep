{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nlet AddEditComponent = class AddEditComponent {\n  constructor(employeeService, formBuilder, router, route, alertService, accountService, departmentService) {\n    this.employeeService = employeeService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.route = route;\n    this.alertService = alertService;\n    this.accountService = accountService;\n    this.departmentService = departmentService;\n    this.loading = false;\n    this.submitted = false;\n    this.accounts = [];\n    this.departments = [];\n  }\n  ngOnInit() {\n    this.id = this.route.snapshot.params['id'];\n    this.isAddMode = !this.id;\n    // Initialize form with default values\n    this.form = this.formBuilder.group({\n      userId: ['', [Validators.required]],\n      employeeId: ['', [Validators.required]],\n      departmentId: ['', [Validators.required]],\n      position: ['', [Validators.required]],\n      hireDate: ['', [Validators.required]],\n      isActive: [true]\n    });\n    // Load accounts and departments\n    this.loadAccounts();\n    this.loadDepartments();\n    if (!this.isAddMode) {\n      this.loadEmployee();\n    }\n  }\n  loadAccounts() {\n    this.accountService.getAll().pipe(first()).subscribe({\n      next: accounts => {\n        this.accounts = accounts;\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  loadDepartments() {\n    this.departmentService.getAll().pipe(first()).subscribe({\n      next: departments => {\n        this.departments = departments;\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  loadEmployee() {\n    this.employeeService.getById(this.id).pipe(first()).subscribe({\n      next: employee => {\n        this.form.patchValue(employee);\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    if (this.isAddMode) {\n      this.createEmployee();\n    } else {\n      this.updateEmployee();\n    }\n  }\n  createEmployee() {\n    this.employeeService.create(this.form.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Employee created successfully', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['/admin/employees']);\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n  updateEmployee() {\n    this.employeeService.update(this.id, this.form.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Update successful', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['/admin/employees']);\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n};\nAddEditComponent = __decorate([Component({\n  templateUrl: 'add-edit.component.html'\n})], AddEditComponent);\nexport { AddEditComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}