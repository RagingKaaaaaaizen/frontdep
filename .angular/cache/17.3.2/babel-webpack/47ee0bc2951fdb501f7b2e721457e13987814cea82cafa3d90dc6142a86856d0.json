{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nlet EmployeeTransferComponent = class EmployeeTransferComponent {\n  constructor(formBuilder, route, router, employeeService, departmentService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.employeeService = employeeService;\n    this.departmentService = departmentService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n    this.employees = [];\n    this.departments = [];\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      employeeId: ['', Validators.required],\n      departmentId: ['', Validators.required],\n      reason: ['', Validators.required]\n    });\n    // Load employees and departments\n    this.employeeService.getAll().pipe(first()).subscribe(employees => {\n      this.employees = employees;\n    });\n    this.departmentService.getAll().pipe(first()).subscribe(departments => {\n      this.departments = departments;\n    });\n    // Handle employee selection\n    this.form.get('employeeId').valueChanges.subscribe(employeeId => {\n      if (employeeId) {\n        this.employeeService.getById(employeeId).pipe(first()).subscribe(employee => {\n          this.selectedEmployee = employee;\n          // Pre-select current department\n          this.form.patchValue({\n            departmentId: employee.departmentId\n          });\n        });\n      }\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.employeeService.transferDepartment(this.f.employeeId.value, this.f.departmentId.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Employee transferred successfully', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['../'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n};\nEmployeeTransferComponent = __decorate([Component({\n  selector: 'app-employee-transfer',\n  templateUrl: './employee-transfer.component.html'\n})], EmployeeTransferComponent);\nexport { EmployeeTransferComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}