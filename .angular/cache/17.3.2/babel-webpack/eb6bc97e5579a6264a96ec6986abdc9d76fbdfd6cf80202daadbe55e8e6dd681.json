{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nlet PCComponentsComponent = class PCComponentsComponent {\n  // Computed property for available stocks count\n  get availableStocksCount() {\n    const count = this.allStocks.filter(stock => stock.quantity > 0).length;\n    console.log('availableStocksCount calculated:', count, 'from', this.allStocks.length, 'total stocks');\n    return count;\n  }\n  // Method to get stock alert class\n  getStockAlertClass(itemId) {\n    if (!itemId) return '';\n    const stockStatus = this.getStockStatus(itemId);\n    console.log(`getStockAlertClass for item ${itemId}:`, stockStatus);\n    if (stockStatus.availableQty > 0) {\n      return 'alert-success';\n    } else if (stockStatus.hasStock && stockStatus.hasZeroStock) {\n      return 'alert-warning';\n    } else {\n      return 'alert-danger';\n    }\n  }\n  // Debug method to get stock details for an item\n  getStockDebugInfo(itemId) {\n    if (!itemId || this.allStocks.length === 0) {\n      return {\n        message: 'No stock data available'\n      };\n    }\n    // Convert itemId to number to ensure type matching\n    const numericItemId = Number(itemId);\n    console.log('getStockDebugInfo - itemId:', itemId, 'type:', typeof itemId);\n    console.log('getStockDebugInfo - numericItemId:', numericItemId, 'type:', typeof numericItemId);\n    console.log('getStockDebugInfo - allStocks itemIds:', this.allStocks.map(s => ({\n      id: s.id,\n      itemId: s.itemId,\n      itemIdType: typeof s.itemId\n    })));\n    const stockEntries = this.allStocks.filter(stock => {\n      const stockItemId = Number(stock.itemId);\n      const matches = stockItemId === numericItemId;\n      console.log(`Stock ${stock.id}: itemId=${stock.itemId} (${typeof stock.itemId}) vs selected=${numericItemId} (${typeof numericItemId}) - matches: ${matches}`);\n      return matches;\n    });\n    const availableStocks = stockEntries.filter(stock => stock.quantity > 0);\n    const result = {\n      itemId,\n      numericItemId,\n      totalStocks: this.allStocks.length,\n      matchingStocks: stockEntries.length,\n      availableStocks: availableStocks.length,\n      stockEntries: stockEntries.map(s => ({\n        id: s.id,\n        itemId: s.itemId,\n        quantity: s.quantity,\n        price: s.price,\n        locationId: s.locationId,\n        locationName: s.location?.name || 'No location'\n      }))\n    };\n    console.log('getStockDebugInfo result:', result);\n    return result;\n  }\n  constructor(route, router, pcService, pcComponentService, stockService, itemService, categoryService, brandService, alertService, accountService) {\n    this.route = route;\n    this.router = router;\n    this.pcService = pcService;\n    this.pcComponentService = pcComponentService;\n    this.stockService = stockService;\n    this.itemService = itemService;\n    this.categoryService = categoryService;\n    this.brandService = brandService;\n    this.alertService = alertService;\n    this.accountService = accountService;\n    this.Role = Role;\n    this.pc = null;\n    this.components = [];\n    this.items = [];\n    this.categories = [];\n    this.brands = [];\n    this.allStocks = [];\n    // Add component form properties\n    this.showAddForm = false;\n    this.newComponent = {\n      itemId: null,\n      stockId: null,\n      // Add stockId to track which stock entry is being used\n      quantity: 1,\n      price: null,\n      totalPrice: null,\n      status: 'Working',\n      remarks: ''\n    };\n    this.availableItems = [];\n    this.existingPCComponents = [];\n    this.categoryError = '';\n    this.submitted = false;\n    this.loading = false;\n  }\n  ngOnInit() {\n    const pcId = this.route.snapshot.params['id'];\n    this.loadPC(pcId);\n    this.loadData();\n    // Listen for stock data changes from other components\n    window.addEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n  }\n  loadData() {\n    this.loadItems();\n    this.loadCategories();\n    this.loadBrands();\n    this.loadStocksForFiltering();\n  }\n  loadStocksForFiltering() {\n    console.log('Loading stocks from API...');\n    this.stockService.getAll().pipe(first()).subscribe({\n      next: stocks => {\n        this.allStocks = stocks;\n        console.log('Loaded stocks for filtering:', stocks.length);\n        // Debug stock data structure\n        if (stocks.length > 0) {\n          const sampleStock = stocks[0];\n          console.log('Sample stock structure:', {\n            id: sampleStock.id,\n            itemId: sampleStock.itemId,\n            locationId: sampleStock.locationId,\n            quantity: sampleStock.quantity,\n            price: sampleStock.price,\n            totalPrice: sampleStock.totalPrice,\n            remarks: sampleStock.remarks,\n            createdAt: sampleStock.createdAt,\n            item: sampleStock.item,\n            location: sampleStock.location\n          });\n          // Log all stock entries for debugging\n          console.log('All stock entries:', stocks.map(s => ({\n            id: s.id,\n            itemId: s.itemId,\n            itemName: s.item?.name || 'No item',\n            locationId: s.locationId,\n            locationName: s.location?.name || 'No location',\n            quantity: s.quantity,\n            price: s.price\n          })));\n        } else {\n          console.log('No stock entries found in database');\n        }\n        // Filter available items if items are already loaded\n        if (this.items.length > 0) {\n          this.filterAvailableItems();\n        } else {\n          console.log('Items not loaded yet, stocks will be used when items are loaded');\n        }\n      },\n      error: error => {\n        this.alertService.error('Error loading stocks: ' + error);\n        console.error('Error loading stocks:', error);\n        console.error('Error details:', error);\n      }\n    });\n  }\n  filterAvailableItems() {\n    if (this.allStocks.length === 0) {\n      console.log('No stocks loaded yet, cannot filter available items');\n      return;\n    }\n    if (this.items.length === 0) {\n      console.log('No items loaded yet, cannot filter available items');\n      return;\n    }\n    console.log('Filtering available items across all locations');\n    console.log('Total stocks loaded:', this.allStocks.length);\n    console.log('Total items loaded:', this.items.length);\n    // NOTE: Stock entries use StorageLocation, but PC uses RoomLocation\n    // For now, we'll show all available stock regardless of location\n    // This allows users to add components from any available stock\n    // Get all stock entries with positive quantities\n    const availableStocks = this.allStocks.filter(stock => stock.quantity > 0);\n    console.log('Available stocks (all locations):', availableStocks.length);\n    console.log('Available stocks details:', availableStocks.map(s => ({\n      id: s.id,\n      itemId: s.itemId,\n      locationId: s.locationId,\n      quantity: s.quantity,\n      price: s.price,\n      item: s.item ? s.item.name : 'No item data'\n    })));\n    // Group by item and calculate available quantities\n    const itemAvailability = new Map();\n    availableStocks.forEach(stock => {\n      const itemId = Number(stock.itemId); // Ensure numeric type\n      if (!itemAvailability.has(itemId)) {\n        itemAvailability.set(itemId, 0);\n      }\n      itemAvailability.set(itemId, itemAvailability.get(itemId) + stock.quantity);\n    });\n    console.log('Item availability map:', itemAvailability);\n    // Filter items that have stock available\n    this.availableItems = this.items.filter(item => {\n      const availableQty = itemAvailability.get(item.id) || 0;\n      const hasStock = availableQty > 0;\n      console.log(`Item ${item.name} (ID: ${item.id}): ${availableQty} available`);\n      return hasStock;\n    });\n    console.log('Available items for PC component:', this.availableItems.length);\n    console.log('Available items:', this.availableItems.map(item => ({\n      id: item.id,\n      name: item.name,\n      category: item.category ? item.category.name : 'No category'\n    })));\n    // Force change detection to update the template\n    setTimeout(() => {\n      console.log('Forcing change detection after filtering items');\n    }, 0);\n  }\n  loadExistingPCComponents() {\n    if (!this.pc) return;\n    // Get ALL PC components globally to calculate accurate available stock\n    this.pcComponentService.getAll().pipe(first()).subscribe({\n      next: components => {\n        this.existingPCComponents = components;\n        console.log('Global PC components loaded:', this.existingPCComponents.length);\n        // Also load current PC components for display\n        this.loadCurrentPCComponents();\n      },\n      error: error => {\n        console.error('Error loading global PC components:', error);\n        this.existingPCComponents = [];\n      }\n    });\n  }\n  loadCurrentPCComponents() {\n    if (!this.pc) return;\n    // Get existing components for this PC from the PC Components table\n    this.pcComponentService.getByPCId(this.pc.id).pipe(first()).subscribe({\n      next: components => {\n        this.components = components;\n        console.log('Current PC components:', this.components);\n      },\n      error: error => {\n        console.error('Error loading current PC components:', error);\n        this.components = [];\n      }\n    });\n  }\n  onItemChange() {\n    console.log('Item changed to:', this.newComponent.itemId);\n    if (this.newComponent.itemId) {\n      // Reset price, total price, and stock ID when item changes\n      this.newComponent.price = null;\n      this.newComponent.totalPrice = null;\n      this.newComponent.stockId = null;\n      // Validate category first\n      this.validateCategory();\n      // Load price from stock immediately when item is selected\n      console.log('Loading price immediately for item:', this.newComponent.itemId);\n      this.loadPriceFromStock();\n    } else {\n      // Reset price, total price, and stock ID when no item is selected\n      this.newComponent.price = null;\n      this.newComponent.totalPrice = null;\n      this.newComponent.stockId = null;\n    }\n  }\n  onPriceInput() {\n    // Recalculate total price when price changes\n    this.calculateTotalPrice();\n  }\n  onQuantityChange() {\n    console.log('onQuantityChange called - current quantity:', this.newComponent.quantity);\n    // Don't validate if quantity is empty or null\n    if (!this.newComponent.quantity || this.newComponent.quantity === null) {\n      console.log('Quantity is empty, skipping validation');\n      return;\n    }\n    // Convert to number and validate\n    const quantity = Number(this.newComponent.quantity);\n    // Only validate if we have a valid item selected\n    if (this.newComponent.itemId && quantity > 0) {\n      // Check if quantity exceeds available stock\n      const availableQuantity = this.getAvailableQuantity(this.newComponent.itemId);\n      console.log('Available quantity:', availableQuantity, 'Requested quantity:', quantity);\n      if (availableQuantity === 0) {\n        console.log('No stock available for this item at this location');\n        this.alertService.error('No stock available for this item at this location.');\n        this.newComponent.quantity = 1; // Reset to 1 instead of empty\n        return;\n      }\n      if (quantity > availableQuantity) {\n        this.alertService.error(`Only ${availableQuantity} units are available in stock.`);\n        this.newComponent.quantity = availableQuantity; // Reset to max available\n        console.log('Quantity reset to:', this.newComponent.quantity);\n        this.calculateTotalPrice(); // Recalculate after reset\n        return;\n      }\n      // Recalculate total price when quantity changes\n      this.calculateTotalPrice();\n    }\n  }\n  getAvailableQuantity(itemId) {\n    if (this.allStocks.length === 0) {\n      console.log('No stocks loaded yet for getAvailableQuantity');\n      return 0;\n    }\n    // Convert itemId to number to ensure type matching\n    const numericItemId = Number(itemId);\n    console.log('Getting available quantity for item:', itemId, 'numeric:', numericItemId, 'across all locations');\n    console.log('Total stocks loaded:', this.allStocks.length);\n    // Calculate total stock for this item (sum of all positive quantities)\n    const itemStocks = this.allStocks.filter(stock => {\n      const stockItemId = Number(stock.itemId);\n      return stockItemId === numericItemId;\n    });\n    console.log('All stock entries for item', itemId, ':', itemStocks.length);\n    // Calculate total stock (sum of all positive quantities)\n    let totalStock = 0;\n    itemStocks.forEach(stock => {\n      if (stock.quantity > 0) {\n        totalStock += stock.quantity;\n      }\n    });\n    // Calculate how much is already used in PC components globally\n    // We need to get this from the backend to get accurate global usage\n    const usedInPCComponents = this.getGlobalPCComponentUsage(numericItemId);\n    // Available quantity = total stock - used in PC components globally\n    const availableQuantity = Math.max(0, totalStock - usedInPCComponents);\n    console.log('Stock calculation for item', itemId, ':', {\n      totalStock,\n      usedInPCComponents,\n      availableQuantity,\n      stockEntries: itemStocks.map(s => ({\n        id: s.id,\n        itemId: s.itemId,\n        quantity: s.quantity,\n        type: s.quantity > 0 ? 'available' : 'empty'\n      }))\n    });\n    return availableQuantity;\n  }\n  // Get global PC component usage for an item (from all PCs, not just current PC)\n  getGlobalPCComponentUsage(itemId) {\n    // For now, we'll use the existing components data\n    // In a more robust implementation, this would fetch from backend\n    const globalUsage = this.existingPCComponents.filter(component => component.itemId === itemId).reduce((total, component) => total + component.quantity, 0);\n    console.log(`Global PC component usage for item ${itemId}: ${globalUsage}`);\n    return globalUsage;\n  }\n  // Add a method to check if stock exists but is zero\n  hasStockButZero(itemId) {\n    if (this.allStocks.length === 0) {\n      return false;\n    }\n    const stockEntries = this.allStocks.filter(stock => stock.itemId === itemId);\n    return stockEntries.length > 0 && stockEntries.every(stock => stock.quantity <= 0);\n  }\n  // Add a method to get stock status for better error messages\n  getStockStatus(itemId) {\n    if (this.allStocks.length === 0) {\n      console.log('No stocks loaded yet for getStockStatus');\n      return {\n        hasStock: false,\n        hasZeroStock: false,\n        availableQty: 0,\n        totalEntries: 0\n      };\n    }\n    // Convert itemId to number to ensure type matching\n    const numericItemId = Number(itemId);\n    // Get all stock entries for this item\n    const stockEntries = this.allStocks.filter(stock => {\n      const stockItemId = Number(stock.itemId);\n      return stockItemId === numericItemId;\n    });\n    // Calculate total stock (sum of all positive quantities)\n    let totalStock = 0;\n    stockEntries.forEach(stock => {\n      if (stock.quantity > 0) {\n        totalStock += stock.quantity;\n      }\n    });\n    // Calculate how much is already used in PC components globally\n    const usedInPCComponents = this.getGlobalPCComponentUsage(numericItemId);\n    // Available quantity = total stock - used in PC components\n    const availableQty = Math.max(0, totalStock - usedInPCComponents);\n    const hasZeroStock = stockEntries.length > 0 && totalStock <= 0;\n    console.log(`getStockStatus for item ${itemId} (numeric: ${numericItemId}):`, {\n      totalStocks: this.allStocks.length,\n      matchingStocks: stockEntries.length,\n      totalStock,\n      usedInPCComponents,\n      availableQty,\n      stockEntries: stockEntries.map(s => ({\n        id: s.id,\n        itemId: s.itemId,\n        quantity: s.quantity,\n        type: s.quantity > 0 ? 'available' : 'empty'\n      }))\n    });\n    const result = {\n      hasStock: stockEntries.length > 0,\n      hasZeroStock,\n      availableQty,\n      totalEntries: stockEntries.length\n    };\n    console.log(`getStockStatus result for item ${itemId}:`, result);\n    return result;\n  }\n  loadPriceFromStock() {\n    if (!this.newComponent.itemId) {\n      console.log('No item selected, skipping price loading');\n      return;\n    }\n    if (this.allStocks.length === 0) {\n      console.log('No stocks loaded yet, cannot load price');\n      return;\n    }\n    // Convert itemId to number to ensure type matching\n    const numericItemId = Number(this.newComponent.itemId);\n    console.log('Loading price for item:', this.newComponent.itemId, 'numeric:', numericItemId);\n    console.log('All stocks available:', this.allStocks.length);\n    // NOTE: Stock entries use StorageLocation, but PC uses RoomLocation\n    // For now, we'll get all stock entries for this item regardless of location\n    // This allows users to add components from any available stock\n    const stockEntries = this.allStocks.filter(stock => {\n      const stockItemId = Number(stock.itemId);\n      return stockItemId === numericItemId && stock.quantity > 0;\n    });\n    console.log('Found stock entries for price loading:', stockEntries.length);\n    console.log('Stock entries details:', stockEntries.map(s => ({\n      id: s.id,\n      itemId: s.itemId,\n      locationId: s.locationId,\n      quantity: s.quantity,\n      price: s.price,\n      remarks: s.remarks,\n      createdAt: s.createdAt\n    })));\n    if (stockEntries.length > 0) {\n      // Sort by creation date (most recent first)\n      stockEntries.sort((a, b) => {\n        const dateA = new Date(a.createdAt || 0);\n        const dateB = new Date(b.createdAt || 0);\n        return dateB.getTime() - dateA.getTime(); // Most recent first\n      });\n      // Use the most recent stock entry's price and store its ID\n      const mostRecentStock = stockEntries[0];\n      this.newComponent.price = mostRecentStock.price;\n      this.newComponent.stockId = mostRecentStock.id; // Store the stock ID\n      console.log('Price auto-filled from stock entry:', {\n        stockId: mostRecentStock.id,\n        stockQuantity: mostRecentStock.quantity,\n        stockPrice: mostRecentStock.price,\n        priceUsed: mostRecentStock.price,\n        itemId: this.newComponent.itemId,\n        locationId: mostRecentStock.locationId,\n        createdAt: mostRecentStock.createdAt\n      });\n      // Calculate total price if quantity is set (should be 1 by default)\n      if (this.newComponent.quantity && this.newComponent.quantity > 0) {\n        this.calculateTotalPrice();\n      } else {\n        // Ensure quantity is set to 1 if not already set\n        this.newComponent.quantity = 1;\n        this.calculateTotalPrice();\n      }\n    } else {\n      console.log('No stock entries found for price loading');\n      console.log('Available stocks for this item:', this.allStocks.filter(stock => {\n        const stockItemId = Number(stock.itemId);\n        return stockItemId === numericItemId;\n      }));\n      this.newComponent.price = null;\n      this.newComponent.totalPrice = null;\n      this.newComponent.stockId = null;\n    }\n  }\n  // Add method to get stock by ID\n  getStockById(stockId) {\n    return this.allStocks.find(stock => stock.id === stockId);\n  }\n  // Add method to get stock data for display\n  getStockData(itemId, locationId) {\n    const numericItemId = Number(itemId);\n    if (locationId) {\n      // If location is specified, filter by both item and location\n      return this.allStocks.filter(stock => {\n        const stockItemId = Number(stock.itemId);\n        return stockItemId === numericItemId && stock.locationId === locationId;\n      });\n    } else {\n      // If no location specified, get all stock entries for this item\n      return this.allStocks.filter(stock => {\n        const stockItemId = Number(stock.itemId);\n        return stockItemId === numericItemId && stock.quantity > 0;\n      });\n    }\n  }\n  // Add method to get stock details for display\n  getStockDetails(itemId, locationId) {\n    const stocks = this.getStockData(itemId, locationId);\n    if (stocks.length > 0) {\n      // Sort by creation date (most recent first)\n      stocks.sort((a, b) => {\n        const dateA = new Date(a.createdAt || 0);\n        const dateB = new Date(b.createdAt || 0);\n        return dateB.getTime() - dateA.getTime();\n      });\n      return stocks[0]; // Return most recent stock entry\n    }\n    return null;\n  }\n  // Add a method to get stock guidance for users\n  getStockGuidance(itemId) {\n    const stockStatus = this.getStockStatus(itemId);\n    if (stockStatus.availableQty > 0) {\n      return `Available: ${stockStatus.availableQty} units across all locations`;\n    } else if (stockStatus.hasStock && stockStatus.hasZeroStock) {\n      return 'Stock exists but quantities are zero. Add stock first.';\n    } else if (stockStatus.hasStock) {\n      return 'Stock entries exist but no available quantity.';\n    } else {\n      return 'No stock entries found across all locations.';\n    }\n  }\n  // Add method to get price source information\n  getPriceSourceInfo() {\n    if (!this.newComponent.stockId || !this.newComponent.price) {\n      return '';\n    }\n    const stock = this.getStockById(this.newComponent.stockId);\n    if (stock) {\n      return `Price from stock #${stock.id} (${stock.location?.name || 'Unknown location'}) - php${stock.price}`;\n    }\n    return 'Price from stock data';\n  }\n  // Add a method to navigate to add stock\n  navigateToAddStock() {\n    if (this.newComponent.itemId) {\n      // Navigate to add stock page with pre-filled item\n      this.router.navigate(['/add/stocks'], {\n        queryParams: {\n          itemId: this.newComponent.itemId,\n          returnUrl: this.router.url\n        }\n      });\n    } else {\n      // Navigate to general add stock page\n      this.router.navigate(['/add/stocks']);\n    }\n  }\n  validateCategory() {\n    if (!this.newComponent.itemId) return;\n    const selectedItem = this.items.find(item => item.id === this.newComponent.itemId);\n    if (!selectedItem) return;\n    const selectedCategoryId = selectedItem.categoryId;\n    // Check if this category is already used in existing components\n    const categoryAlreadyUsed = this.existingPCComponents.some(component => {\n      // Check if component has item data directly\n      if (component.item && component.item.categoryId) {\n        return component.item.categoryId === selectedCategoryId;\n      }\n      // Fallback to checking items array\n      const componentItem = this.items.find(item => item.id === component.itemId);\n      return componentItem && componentItem.categoryId === selectedCategoryId;\n    });\n    if (categoryAlreadyUsed) {\n      this.categoryError = `Category \"${selectedItem.category?.name || 'Unknown'}\" is already used in this PC. Only one item per category is allowed.`;\n      this.newComponent.itemId = null; // Reset selection\n    } else {\n      this.categoryError = '';\n    }\n  }\n  calculateTotalPrice() {\n    const price = this.newComponent.price;\n    const qty = this.newComponent.quantity;\n    console.log('Calculating total price:', {\n      price,\n      qty\n    });\n    // Ensure both values are numbers and valid\n    const numPrice = Number(price);\n    const numQty = Number(qty);\n    if (numPrice > 0 && numQty > 0) {\n      this.newComponent.totalPrice = numPrice * numQty;\n      console.log('Total price calculated:', this.newComponent.totalPrice);\n    } else {\n      this.newComponent.totalPrice = null;\n      console.log('Invalid price or quantity, total price set to null');\n    }\n  }\n  loadPC(pcId) {\n    this.pcService.getById(pcId).pipe(first()).subscribe({\n      next: pc => {\n        this.pc = pc;\n        console.log('PC loaded:', pc);\n        console.log('PC location ID:', pc.roomLocationId);\n        // Load components and other data after PC is loaded\n        this.loadComponents(pcId);\n        this.loadExistingPCComponents();\n        // Ensure stocks are loaded before filtering available items\n        if (this.allStocks.length > 0) {\n          this.filterAvailableItems();\n        } else {\n          // If stocks not loaded yet, wait for them\n          this.loadStocksForFiltering();\n        }\n      },\n      error: error => {\n        this.alertService.error('Error loading PC: ' + error);\n        console.error('Error loading PC:', error);\n      }\n    });\n  }\n  loadComponents(pcId) {\n    // Use the new method that loads current PC components\n    this.loadCurrentPCComponents();\n  }\n  loadItems() {\n    this.itemService.getAll().pipe(first()).subscribe({\n      next: items => {\n        this.items = items;\n        // Filter available items if stocks are already loaded\n        if (this.allStocks.length > 0) {\n          this.filterAvailableItems();\n        }\n      },\n      error: error => {\n        this.alertService.error('Error loading items: ' + error);\n      }\n    });\n  }\n  loadCategories() {\n    this.categoryService.getAll().pipe(first()).subscribe({\n      next: categories => {\n        this.categories = categories;\n      },\n      error: error => {\n        this.alertService.error('Error loading categories: ' + error);\n      }\n    });\n  }\n  loadBrands() {\n    this.brandService.getAll().pipe(first()).subscribe({\n      next: brands => {\n        this.brands = brands;\n      },\n      error: error => {\n        this.alertService.error('Error loading brands: ' + error);\n      }\n    });\n  }\n  refreshData() {\n    this.loadExistingPCComponents(); // This will also load current PC components\n    this.alertService.success('Data refreshed successfully');\n  }\n  getItemName(itemId) {\n    const item = this.items.find(i => i.id === itemId);\n    return item ? item.name : 'Unknown Item';\n  }\n  getItemNameFromComponent(component) {\n    if (component.item) {\n      return component.item.name;\n    }\n    return this.getItemName(component.itemId);\n  }\n  getCategoryName(component) {\n    // Check if component has item data directly\n    if (component.item && component.item.category) {\n      return component.item.category.name;\n    }\n    const item = this.items.find(i => i.id === component.itemId);\n    if (!item) return 'Unknown';\n    const category = this.categories.find(c => c.id === item.categoryId);\n    return category ? category.name : 'Unknown Category';\n  }\n  getBrandName(component) {\n    // Check if component has item data directly\n    if (component.item && component.item.brand) {\n      return component.item.brand.name;\n    }\n    const item = this.items.find(i => i.id === component.itemId);\n    if (!item) return 'Unknown';\n    const brand = this.brands.find(b => b.id === item.brandId);\n    return brand ? brand.name : 'Unknown Brand';\n  }\n  getTotalValue() {\n    return this.components.reduce((total, component) => {\n      return total + component.price * component.quantity;\n    }, 0);\n  }\n  getUniqueCategories() {\n    const categoryIds = this.components.map(component => {\n      // Check if component has item data directly\n      if (component.item && component.item.categoryId) {\n        return component.item.categoryId;\n      }\n      // Fallback to checking items array\n      const item = this.items.find(i => i.id === component.itemId);\n      return item ? item.categoryId : null;\n    }).filter(id => id !== null);\n    return [...new Set(categoryIds)].length;\n  }\n  getTotalQuantity() {\n    return this.components.reduce((total, component) => {\n      return total + component.quantity;\n    }, 0);\n  }\n  addComponent() {\n    this.showAddForm = true;\n    this.resetNewComponent();\n    this.loadExistingPCComponents();\n    // Refresh stock data to ensure we have the latest information\n    this.loadStocksForFiltering();\n    // Ensure quantity is properly set to 1\n    setTimeout(() => {\n      this.newComponent.quantity = 1;\n      console.log('Add component - quantity set to:', this.newComponent.quantity);\n    }, 50);\n    console.log('Add component - newComponent initialized:', this.newComponent);\n  }\n  cancelAdd() {\n    this.showAddForm = false;\n    this.resetNewComponent();\n    this.categoryError = '';\n    this.submitted = false;\n    console.log('Form cancelled, newComponent reset');\n  }\n  resetNewComponent() {\n    this.newComponent = {\n      itemId: null,\n      stockId: null,\n      quantity: 1,\n      price: null,\n      totalPrice: null,\n      remarks: ''\n    };\n    this.categoryError = '';\n    this.submitted = false;\n    console.log('Reset newComponent - quantity set to:', this.newComponent.quantity);\n  }\n  saveComponent() {\n    this.submitted = true;\n    console.log('Saving component with data:', this.newComponent);\n    // Validate required fields\n    if (!this.newComponent.itemId) {\n      this.alertService.error('Please select an item');\n      return;\n    }\n    if (!this.newComponent.quantity || this.newComponent.quantity <= 0) {\n      this.alertService.error('Quantity must be greater than 0');\n      return;\n    }\n    if (!this.newComponent.price || this.newComponent.price <= 0) {\n      this.alertService.error('Price must be greater than 0');\n      return;\n    }\n    // Additional validation for PC components\n    if (this.categoryError) {\n      this.alertService.error(this.categoryError);\n      return;\n    }\n    // Final stock validation - check if quantity exceeds available stock\n    const stockStatus = this.getStockStatus(this.newComponent.itemId);\n    if (stockStatus.availableQty === 0) {\n      let errorMessage = '';\n      if (stockStatus.hasStock && stockStatus.hasZeroStock) {\n        errorMessage = 'This item has stock entries but all quantities are zero. Please add stock first.';\n      } else if (stockStatus.hasStock) {\n        errorMessage = 'This item has stock entries but no available quantity. Please check stock records.';\n      } else {\n        errorMessage = 'No stock available for this item across all locations. Please add stock first.';\n      }\n      this.alertService.error(errorMessage);\n      return;\n    }\n    if (this.newComponent.quantity > stockStatus.availableQty) {\n      this.alertService.error(`Only ${stockStatus.availableQty} units are available in stock.`);\n      return;\n    }\n    // Auto-calculate total price before saving\n    this.calculateTotalPrice();\n    // Validate total price\n    if (!this.newComponent.totalPrice || this.newComponent.totalPrice <= 0) {\n      this.alertService.error('Total price calculation failed. Please check price and quantity.');\n      return;\n    }\n    this.loading = true;\n    // Create PC component entry\n    const componentData = {\n      pcId: this.pc.id,\n      itemId: this.newComponent.itemId,\n      quantity: this.newComponent.quantity,\n      price: this.newComponent.price,\n      totalPrice: this.newComponent.totalPrice,\n      status: this.newComponent.status,\n      stockId: this.newComponent.stockId,\n      remarks: this.newComponent.remarks || ''\n    };\n    console.log('Creating PC component with data:', componentData);\n    // Show confirmation dialog about stock deduction\n    const confirmMessage = `Are you sure you want to add this component?\\n\\nThis will deduct ${this.newComponent.quantity} units from the stock quantity, just like disposal.\\n\\nItem: ${this.getItemName(this.newComponent.itemId)}\\nQuantity: ${this.newComponent.quantity}\\nPrice: php${this.newComponent.price}`;\n    if (confirm(confirmMessage)) {\n      this.pcComponentService.create(componentData).pipe(first()).subscribe({\n        next: result => {\n          this.loading = false;\n          this.alertService.success(`Component added successfully. Stock quantity reduced by ${this.newComponent.quantity} units.`);\n          this.showAddForm = false;\n          this.resetNewComponent();\n          this.categoryError = '';\n          this.submitted = false;\n          // Refresh stock data and components after adding\n          this.loadStocksForFiltering();\n          this.loadExistingPCComponents(); // This will refresh both global and current components\n          // Notify stock list component to refresh its data\n          this.notifyStockListRefresh();\n        },\n        error: error => {\n          this.loading = false;\n          this.alertService.error('Error adding component: ' + error);\n          console.error('Error adding component:', error);\n        }\n      });\n    } else {\n      this.loading = false;\n    }\n  }\n  viewComponent(id) {\n    this.router.navigate(['/stocks', id]);\n  }\n  editComponent(id) {\n    this.router.navigate(['/stocks', id, 'edit']);\n  }\n  removeComponent(id) {\n    // Find the component to get its details for the confirmation message\n    const component = this.components.find(c => c.id === id);\n    if (!component) {\n      this.alertService.error('Component not found');\n      return;\n    }\n    const confirmMessage = `Are you sure you want to remove this component from the PC?\\n\\nThis will restore ${component.quantity} units back to the stock quantity.\\n\\nItem: ${this.getItemName(component.itemId)}\\nQuantity: ${component.quantity}\\nPrice: php${component.price}`;\n    if (confirm(confirmMessage)) {\n      this.pcComponentService.delete(id).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success(`Component removed successfully. Stock quantity restored by ${component.quantity} units.`);\n          // Refresh stock data and components after removing\n          this.loadStocksForFiltering();\n          this.loadExistingPCComponents(); // This will refresh both global and current components\n          // Notify stock list component to refresh its data\n          this.notifyStockListRefresh();\n        },\n        error: error => {\n          this.alertService.error('Error removing component: ' + error);\n        }\n      });\n    }\n  }\n  returnToStock(id) {\n    // Find the component to get its details for the confirmation message\n    const component = this.components.find(c => c.id === id);\n    if (!component) {\n      this.alertService.error('Component not found');\n      return;\n    }\n    const confirmMessage = `Are you sure you want to return this component back to stock?\\n\\nThis will add ${component.quantity} units back to the global stock quantity.\\n\\nItem: ${this.getItemName(component.itemId)}\\nQuantity: ${component.quantity}\\nPrice: php${component.price}`;\n    if (confirm(confirmMessage)) {\n      this.pcComponentService.returnToStock(id).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success(`Component returned to stock successfully. Stock quantity increased by ${component.quantity} units.`);\n          // Refresh stock data and components after returning to stock\n          this.loadStocksForFiltering();\n          this.loadExistingPCComponents(); // This will refresh both global and current components\n          // Notify stock list component to refresh its data\n          this.notifyStockListRefresh();\n        },\n        error: error => {\n          this.alertService.error('Error returning component to stock: ' + error);\n        }\n      });\n    }\n  }\n  // Method to notify stock list component to refresh its data\n  notifyStockListRefresh() {\n    // Dispatch a custom event that stock list component can listen to\n    const event = new CustomEvent('stockDataChanged', {\n      detail: {\n        timestamp: new Date().getTime(),\n        message: 'PC component added/removed - stock data updated'\n      }\n    });\n    window.dispatchEvent(event);\n    console.log('Stock data change event dispatched');\n  }\n  // Handle stock data changes from other components\n  handleStockDataChange(event) {\n    console.log('Stock data change detected in PC components:', event.detail);\n    console.log('Refreshing PC component stock data...');\n    // Refresh stock data to get updated quantities\n    this.loadStocksForFiltering();\n    // Refresh global PC components to get accurate available stock\n    this.loadExistingPCComponents();\n    // Re-filter available items with updated stock data\n    setTimeout(() => {\n      this.filterAvailableItems();\n    }, 100);\n    // Show a brief notification\n    this.alertService.info('Stock data updated - quantities refreshed');\n  }\n  ngOnDestroy() {\n    // Clean up event listener\n    window.removeEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n  }\n  // Notify PC list component about component status changes\n  notifyComponentStatusChange() {\n    const event = new CustomEvent('componentStatusChanged', {\n      detail: {\n        timestamp: new Date().getTime(),\n        message: 'Component status updated - PC status may need auto-update'\n      }\n    });\n    window.dispatchEvent(event);\n    console.log('Component status change event dispatched');\n  }\n  // Status-related methods\n  updateComponentStatus(component) {\n    console.log('Updating component status:', component.id, 'to:', component.status);\n    this.pcComponentService.update(component.id, {\n      status: component.status\n    }).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success(`Component status updated to ${component.status}`);\n        // Refresh components to get updated data\n        this.loadCurrentPCComponents();\n        // Notify PC list component about status change\n        this.notifyComponentStatusChange();\n      },\n      error: error => {\n        this.alertService.error('Error updating component status: ' + error);\n        console.error('Error updating component status:', error);\n      }\n    });\n  }\n  getStatusClass(status) {\n    switch (status) {\n      case 'Working':\n        return 'form-select-success';\n      case 'Missing':\n        return 'form-select-danger';\n      case 'Not Working':\n        return 'form-select-danger';\n      case 'Maintenance':\n        return 'form-select-warning';\n      default:\n        return '';\n    }\n  }\n  getComponentRowClass(component) {\n    switch (component.status) {\n      case 'Working':\n        return '';\n      case 'Missing':\n        return 'table-danger';\n      case 'Not Working':\n        return 'table-danger';\n      case 'Maintenance':\n        return 'table-warning';\n      default:\n        return '';\n    }\n  }\n  getPCStatus() {\n    if (this.components.length === 0) {\n      return {\n        status: 'No Components',\n        class: 'text-muted',\n        hasIssues: false\n      };\n    }\n    const hasMissing = this.components.some(c => c.status === 'Missing');\n    const hasNotWorking = this.components.some(c => c.status === 'Not Working');\n    const hasMaintenance = this.components.some(c => c.status === 'Maintenance');\n    const allWorking = this.components.every(c => c.status === 'Working');\n    if (hasMissing || hasNotWorking) {\n      return {\n        status: 'Not Working',\n        class: 'text-danger',\n        hasIssues: true\n      };\n    } else if (hasMaintenance) {\n      return {\n        status: 'Maintenance',\n        class: 'text-warning',\n        hasIssues: true\n      };\n    } else if (allWorking) {\n      return {\n        status: 'Working',\n        class: 'text-success',\n        hasIssues: false\n      };\n    } else {\n      return {\n        status: 'Unknown',\n        class: 'text-muted',\n        hasIssues: false\n      };\n    }\n  }\n  hasRole(roles) {\n    const account = this.accountService.accountValue;\n    if (!account) return false;\n    const userRole = account.role;\n    return roles.some(role => role === userRole);\n  }\n};\nPCComponentsComponent = __decorate([Component({\n  selector: 'app-pc-components',\n  templateUrl: './pc-components.component.html',\n  styleUrls: ['./pc-components.component.css']\n})], PCComponentsComponent);\nexport { PCComponentsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}