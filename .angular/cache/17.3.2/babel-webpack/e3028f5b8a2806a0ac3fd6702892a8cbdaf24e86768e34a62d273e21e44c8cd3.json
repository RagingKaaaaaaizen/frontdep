{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Stock } from '../_models/stock';\nlet StockEditComponent = class StockEditComponent {\n  constructor(route, router, stockService, itemService, locationService, alertService) {\n    this.route = route;\n    this.router = router;\n    this.stockService = stockService;\n    this.itemService = itemService;\n    this.locationService = locationService;\n    this.alertService = alertService;\n    this.stock = new Stock();\n    this.isEdit = false;\n    this.isViewMode = false;\n    this.items = [];\n    this.locations = [];\n    this.loading = false;\n    this.error = '';\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.isViewMode = this.router.url.includes('/view/');\n    // Load all data\n    this.loadData();\n    // Listen for stock data changes from other components\n    window.addEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n  }\n  loadData() {\n    // Load items\n    this.itemService.getAll().subscribe(items => {\n      this.items = items;\n    });\n    // Load storage locations\n    this.locationService.getAll().subscribe(locations => {\n      this.locations = locations;\n    });\n    // If editing existing stock\n    const id = this.route.snapshot.params['id'];\n    if (id) {\n      this.isEdit = true;\n      this.stockService.getById(id).subscribe(stock => {\n        this.stock = stock;\n        this.stock.locationId = stock.location?.id;\n        // Ensure totalPrice is calculated if price & quantity are present\n        if (this.stock.price && this.stock.quantity) {\n          this.calculateTotalPrice();\n        }\n      });\n    } else {\n      // Initialize new stock with default values\n      this.stock = new Stock();\n      this.stock.quantity = 1;\n      this.stock.price = null;\n      this.stock.totalPrice = null;\n    }\n  }\n  onItemChange() {\n    // Handle item selection\n    console.log('Item selected:', this.stock.itemId);\n  }\n  onQuantityChange() {\n    // Handle quantity changes\n    if (this.stock.quantity && this.stock.price) {\n      this.calculateTotalPrice();\n    }\n  }\n  // Calculate total price when quantity or price changes\n  calculateTotalPrice() {\n    const price = this.stock.price ?? 0;\n    const qty = this.stock.quantity ?? 0;\n    this.stock.totalPrice = price * qty;\n  }\n  save() {\n    this.submitted = true;\n    // Validate required fields\n    if (!this.stock.itemId) {\n      this.error = 'Please select an item';\n      return;\n    }\n    if (!this.stock.locationId) {\n      this.error = 'Please select a storage location';\n      return;\n    }\n    if (!this.stock.quantity || this.stock.quantity <= 0) {\n      this.error = 'Quantity must be greater than 0';\n      return;\n    }\n    if (!this.stock.price || this.stock.price <= 0) {\n      this.error = 'Price must be greater than 0';\n      return;\n    }\n    // Auto-calculate before saving\n    this.calculateTotalPrice();\n    this.loading = true;\n    this.error = '';\n    if (this.isEdit) {\n      this.stockService.update(this.stock.id, this.stock).subscribe({\n        next: () => {\n          this.loading = false;\n          // Notify stock list component to refresh its data\n          this.notifyStockListRefresh();\n          this.router.navigate(['/stocks']);\n        },\n        error: error => {\n          this.loading = false;\n          this.error = 'Error updating stock: ' + (error.error?.message || error.message || 'Unknown error');\n        }\n      });\n    } else {\n      this.stockService.create(this.stock).subscribe({\n        next: result => {\n          this.loading = false;\n          // Notify stock list component to refresh its data\n          this.notifyStockListRefresh();\n          this.router.navigate(['/stocks']);\n        },\n        error: error => {\n          this.loading = false;\n          this.error = 'Error creating stock: ' + (error.error?.message || error.message || 'Unknown error');\n        }\n      });\n    }\n  }\n  // Method to notify stock list component to refresh its data\n  notifyStockListRefresh() {\n    // Dispatch a custom event that stock list component can listen to\n    const event = new CustomEvent('stockDataChanged', {\n      detail: {\n        timestamp: new Date().getTime(),\n        message: 'Stock added/updated - stock data updated'\n      }\n    });\n    window.dispatchEvent(event);\n    console.log('Stock data change event dispatched from stock edit component');\n  }\n  // Handle stock data changes from other components\n  handleStockDataChange(event) {\n    console.log('Stock data change detected in stock edit component:', event.detail);\n    // Reload data to get updated stock information\n    this.loadData();\n    // Show a brief notification\n    this.alertService.info('Stock data updated - information refreshed');\n  }\n  ngOnDestroy() {\n    // Clean up event listener\n    window.removeEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n  }\n};\nStockEditComponent = __decorate([Component({\n  selector: 'app-stock-edit',\n  templateUrl: './stock-edit.component.html'\n})], StockEditComponent);\nexport { StockEditComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}