{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nlet StockListComponent = class StockListComponent {\n  constructor(router, stockService, itemService, categoryService, brandService, locationService, pcService, pcComponentService, alertService, accountService) {\n    this.router = router;\n    this.stockService = stockService;\n    this.itemService = itemService;\n    this.categoryService = categoryService;\n    this.brandService = brandService;\n    this.locationService = locationService;\n    this.pcService = pcService;\n    this.pcComponentService = pcComponentService;\n    this.alertService = alertService;\n    this.accountService = accountService;\n    this.Role = Role;\n    this.stocks = [];\n    this.items = [];\n    this.categories = [];\n    this.brands = [];\n    this.locations = [];\n    this.pcs = [];\n    this.pcComponents = [];\n    this.filteredStocks = [];\n    this.searchTerm = '';\n    this.selectedType = '';\n    this.selectedCategory = '';\n    this.currentPage = 1;\n    this.itemsPerPage = 10;\n    this.Math = Math;\n  }\n  ngOnInit() {\n    this.loadData();\n    // Listen for stock data changes from PC components\n    window.addEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n  }\n  ngOnDestroy() {\n    // Clean up event listener\n    window.removeEventListener('stockDataChanged', this.handleStockDataChange.bind(this));\n  }\n  loadData() {\n    this.loadStocks();\n    this.loadItems();\n    this.loadCategories();\n    this.loadBrands();\n    this.loadLocations();\n    this.loadPCs();\n    this.loadPCComponents();\n  }\n  loadStocks() {\n    this.stockService.getAll().pipe(first()).subscribe({\n      next: stocks => {\n        this.stocks = stocks;\n        this.applyFilters();\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  loadItems() {\n    this.itemService.getAll().pipe(first()).subscribe({\n      next: items => {\n        this.items = items;\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  loadCategories() {\n    this.categoryService.getAll().pipe(first()).subscribe({\n      next: categories => {\n        this.categories = categories;\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  loadBrands() {\n    this.brandService.getAll().pipe(first()).subscribe({\n      next: brands => {\n        this.brands = brands;\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  loadLocations() {\n    this.locationService.getAll().pipe(first()).subscribe({\n      next: locations => {\n        this.locations = locations;\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  loadPCs() {\n    this.pcService.getAll().pipe(first()).subscribe({\n      next: pcs => {\n        this.pcs = pcs;\n      },\n      error: error => {\n        this.alertService.error(error);\n      }\n    });\n  }\n  loadPCComponents() {\n    this.pcComponentService.getAll().pipe(first()).subscribe({\n      next: components => {\n        this.pcComponents = components;\n        console.log('PC Components loaded:', this.pcComponents.length);\n      },\n      error: error => {\n        console.error('Error loading PC Components:', error);\n        this.pcComponents = [];\n      }\n    });\n  }\n  applyFilters() {\n    let filtered = [...this.stocks];\n    // Search filter\n    if (this.searchTerm) {\n      filtered = filtered.filter(stock => {\n        const itemName = this.getItemName(stock.itemId).toLowerCase();\n        return itemName.includes(this.searchTerm.toLowerCase());\n      });\n    }\n    // Type filter\n    if (this.selectedType) {\n      if (this.selectedType === 'ADD') {\n        filtered = filtered.filter(stock => !stock.disposeId);\n      } else if (this.selectedType === 'DISPOSE') {\n        filtered = filtered.filter(stock => stock.disposeId);\n      }\n    }\n    // Category filter\n    if (this.selectedCategory) {\n      filtered = filtered.filter(stock => {\n        const item = this.items.find(i => i.id === stock.itemId);\n        return item && item.categoryId == this.selectedCategory;\n      });\n    }\n    this.filteredStocks = filtered;\n    this.currentPage = 1;\n  }\n  onSearch() {\n    this.applyFilters();\n  }\n  onFilterChange() {\n    this.applyFilters();\n  }\n  refreshData() {\n    this.loadData();\n    this.alertService.success('Data refreshed successfully');\n  }\n  getAdditionsCount() {\n    return this.stocks.filter(stock => !stock.disposeId).length;\n  }\n  getDisposalsCount() {\n    return this.stocks.filter(stock => stock.disposeId).length;\n  }\n  getTotalValue() {\n    return this.stocks.reduce((total, stock) => {\n      return total + stock.price * stock.quantity;\n    }, 0);\n  }\n  getPCComponentsCount() {\n    return this.pcComponents.length;\n  }\n  getItemName(itemId) {\n    const item = this.items.find(i => i.id === itemId);\n    return item ? item.name : 'Unknown Item';\n  }\n  getCategoryName(stock) {\n    const item = this.items.find(i => i.id === stock.itemId);\n    if (!item) return 'Unknown';\n    const category = this.categories.find(c => c.id === item.categoryId);\n    return category ? category.name : 'Unknown Category';\n  }\n  getBrandName(stock) {\n    const item = this.items.find(i => i.id === stock.itemId);\n    if (!item) return 'Unknown';\n    const brand = this.brands.find(b => b.id === item.brandId);\n    return brand ? brand.name : 'Unknown Brand';\n  }\n  getLocationName(stock) {\n    const location = this.locations.find(l => l.id === stock.locationId);\n    return location ? location.name : 'Unknown Location';\n  }\n  isItemInUse(itemId) {\n    // Check if any PC component is using this item\n    return this.pcComponents.some(component => component.itemId === itemId);\n  }\n  getInUseCount(itemId) {\n    // Count total quantity used in PC components for this item\n    return this.pcComponents.filter(component => component.itemId === itemId).reduce((total, component) => total + component.quantity, 0);\n  }\n  getInUseDetails(itemId) {\n    const components = this.pcComponents.filter(component => component.itemId === itemId);\n    if (components.length === 0) {\n      return 'Available';\n    }\n    const totalQuantity = components.reduce((total, component) => total + component.quantity, 0);\n    const pcCount = components.length;\n    return `${totalQuantity} units in ${pcCount} PC${pcCount > 1 ? 's' : ''}`;\n  }\n  hasRole(roles) {\n    const account = this.accountService.accountValue;\n    if (!account) return false;\n    const userRole = account.role;\n    return roles.some(role => role === userRole);\n  }\n  viewStock(id) {\n    console.log('View stock clicked for ID:', id);\n    this.router.navigate(['/stocks', id]);\n  }\n  editStock(id) {\n    console.log('Edit stock clicked for ID:', id);\n    this.router.navigate(['/stocks', id, 'edit']);\n  }\n  deleteStock(id) {\n    console.log('Delete stock clicked for ID:', id);\n    if (confirm('Are you sure you want to delete this stock entry?')) {\n      this.stockService.delete(id).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Stock deleted successfully');\n          this.loadStocks();\n          // Notify other components about stock data change\n          this.notifyStockDataChange();\n        },\n        error: error => {\n          console.error('Error deleting stock:', error);\n          this.alertService.error(error);\n        }\n      });\n    }\n  }\n  disposeStock(stock) {\n    console.log('Dispose stock clicked for stock:', stock);\n    this.router.navigate(['/dispose/add'], {\n      queryParams: {\n        itemId: stock.itemId,\n        availableStock: this.getAvailableStock(stock.itemId)\n      }\n    });\n  }\n  getAvailableStock(itemId) {\n    const itemStocks = this.stocks.filter(s => s.itemId === itemId);\n    // Sum all positive quantities\n    return itemStocks.filter(s => s.quantity > 0).reduce((sum, s) => sum + s.quantity, 0);\n  }\n  getStockSummary(itemId) {\n    const totalStock = this.getAvailableStock(itemId);\n    const inUseQuantity = this.getInUseCount(itemId);\n    const availableQuantity = Math.max(0, totalStock - inUseQuantity);\n    const usedInPCs = this.pcComponents.filter(component => component.itemId === itemId).length;\n    return {\n      total: totalStock,\n      available: availableQuantity,\n      inUse: inUseQuantity,\n      usedInPCs: usedInPCs\n    };\n  }\n  // Pagination methods\n  get totalPages() {\n    return Math.ceil(this.filteredStocks.length / this.itemsPerPage);\n  }\n  get paginatedStocks() {\n    const start = (this.currentPage - 1) * this.itemsPerPage;\n    const end = start + this.itemsPerPage;\n    return this.filteredStocks.slice(start, end);\n  }\n  getPageNumbers() {\n    const pages = [];\n    const maxPages = Math.min(5, this.totalPages);\n    const start = Math.max(1, this.currentPage - Math.floor(maxPages / 2));\n    const end = Math.min(this.totalPages, start + maxPages - 1);\n    for (let i = start; i <= end; i++) {\n      pages.push(i);\n    }\n    return pages;\n  }\n  goToPage(page) {\n    if (page >= 1 && page <= this.totalPages) {\n      this.currentPage = page;\n    }\n  }\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n    }\n  }\n  nextPage() {\n    if (this.currentPage < this.totalPages) {\n      this.currentPage++;\n    }\n  }\n  // Handle stock data changes from PC components\n  handleStockDataChange(event) {\n    console.log('Stock data change detected:', event.detail);\n    console.log('Refreshing stock list data...');\n    // Refresh all data to get updated stock quantities\n    this.loadData();\n    // Show a brief notification with more details\n    const message = event.detail?.message || 'Stock data updated';\n    this.alertService.info(`${message} - quantities refreshed globally`);\n    // Broadcast the change to other components that might need updating\n    this.broadcastStockChange(event.detail);\n  }\n  // Method to notify other components about stock data changes\n  notifyStockDataChange() {\n    // Dispatch a custom event that other components can listen to\n    const event = new CustomEvent('stockDataChanged', {\n      detail: {\n        timestamp: new Date().getTime(),\n        message: 'Stock deleted - stock data updated'\n      }\n    });\n    window.dispatchEvent(event);\n    console.log('Stock data change event dispatched from stock list component');\n  }\n  // Broadcast stock changes to all components that might need updating\n  broadcastStockChange(detail) {\n    // Dispatch additional events for specific components\n    const events = [{\n      name: 'pcStockDataChanged',\n      detail: {\n        ...detail,\n        target: 'pc-components'\n      }\n    }, {\n      name: 'disposeStockDataChanged',\n      detail: {\n        ...detail,\n        target: 'dispose'\n      }\n    }, {\n      name: 'stockEditDataChanged',\n      detail: {\n        ...detail,\n        target: 'stock-edit'\n      }\n    }];\n    events.forEach(eventInfo => {\n      const event = new CustomEvent(eventInfo.name, {\n        detail: eventInfo.detail\n      });\n      window.dispatchEvent(event);\n      console.log(`Broadcasting ${eventInfo.name} event`);\n    });\n  }\n};\nStockListComponent = __decorate([Component({\n  selector: 'app-stock-list',\n  templateUrl: './stock-list.component.html',\n  styles: [`\n    .list-container {\n      padding: 20px 0;\n      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n      min-height: 100vh;\n    }\n\n    .page-header {\n      background: white;\n      border-radius: 16px;\n      padding: 30px;\n      margin-bottom: 30px;\n      box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n      border: 1px solid rgba(255,255,255,0.2);\n    }\n\n    .header-content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      flex-wrap: wrap;\n      gap: 20px;\n    }\n\n    .header-title {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n    }\n\n    .header-title i {\n      font-size: 2.5rem;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      -webkit-background-clip: text;\n      -webkit-text-fill-color: transparent;\n      background-clip: text;\n    }\n\n    .page-title {\n      font-size: 2.5rem;\n      font-weight: bold;\n      color: #333;\n      margin: 0 0 5px 0;\n    }\n\n    .page-subtitle {\n      color: #666;\n      font-size: 1.1rem;\n      margin: 0;\n    }\n\n    .header-actions {\n      display: flex;\n      gap: 10px;\n      flex-wrap: wrap;\n    }\n\n    .header-actions .btn {\n      border-radius: 25px;\n      padding: 12px 24px;\n      font-weight: 600;\n      transition: all 0.3s ease;\n      box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n    }\n\n    .header-actions .btn:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n    }\n\n    .stats-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 20px;\n      margin-bottom: 30px;\n    }\n\n    .stat-card {\n      background: white;\n      border-radius: 16px;\n      padding: 25px;\n      box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n      transition: all 0.3s ease;\n      text-align: center;\n      border: 1px solid rgba(255,255,255,0.2);\n      position: relative;\n      overflow: hidden;\n    }\n\n    .stat-card::before {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      height: 4px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    }\n\n    .stat-card:hover {\n      transform: translateY(-8px);\n      box-shadow: 0 16px 48px rgba(0,0,0,0.15);\n    }\n\n    .stat-icon {\n      font-size: 2.5rem;\n      margin-bottom: 15px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      -webkit-background-clip: text;\n      -webkit-text-fill-color: transparent;\n      background-clip: text;\n    }\n\n    .stat-number {\n      font-size: 2.2rem;\n      font-weight: bold;\n      color: #333;\n      margin-bottom: 5px;\n    }\n\n    .stat-label {\n      color: #666;\n      font-size: 0.9rem;\n      font-weight: 500;\n    }\n\n    .quantity-info, .in-use-info {\n      min-width: 120px;\n    }\n\n    .quantity-info small, .in-use-info small {\n      font-size: 0.75rem;\n      line-height: 1.2;\n    }\n\n    .filters-section {\n      background: white;\n      border-radius: 16px;\n      padding: 25px;\n      margin-bottom: 25px;\n      box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n      border: 1px solid rgba(255,255,255,0.2);\n    }\n\n    .search-box {\n      position: relative;\n    }\n\n    .search-box i {\n      position: absolute;\n      left: 15px;\n      top: 50%;\n      transform: translateY(-50%);\n      color: #667eea;\n      z-index: 1;\n    }\n\n    .search-box .form-control {\n      padding-left: 45px;\n      border-radius: 25px;\n      border: 2px solid #e9ecef;\n      transition: all 0.3s ease;\n    }\n\n    .search-box .form-control:focus {\n      border-color: #667eea;\n      box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);\n    }\n\n    .filter-controls {\n      display: flex;\n      gap: 15px;\n    }\n\n    .filter-controls .form-select {\n      border-radius: 25px;\n      border: 2px solid #e9ecef;\n      transition: all 0.3s ease;\n    }\n\n    .filter-controls .form-select:focus {\n      border-color: #667eea;\n      box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);\n    }\n\n    .card {\n      border: none;\n      border-radius: 16px;\n      box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n      margin-bottom: 25px;\n      transition: all 0.3s ease;\n      overflow: hidden;\n    }\n\n    .card:hover {\n      box-shadow: 0 16px 48px rgba(0,0,0,0.15);\n      transform: translateY(-4px);\n    }\n\n    .card-header {\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n      border-radius: 16px 16px 0 0 !important;\n      padding: 25px;\n      font-weight: 600;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .table-actions {\n      display: flex;\n      gap: 10px;\n    }\n\n    .table-actions .btn {\n      border-radius: 20px;\n      padding: 8px 16px;\n      font-weight: 500;\n    }\n\n    .table {\n      margin-bottom: 0;\n    }\n\n    .table thead th {\n      background: #f8f9fa;\n      border: none;\n      padding: 15px;\n      font-weight: 600;\n      color: #495057;\n      border-bottom: 2px solid #dee2e6;\n    }\n\n    .table tbody td {\n      padding: 15px;\n      vertical-align: middle;\n      border: none;\n      border-bottom: 1px solid #f1f3f4;\n    }\n\n    .table tbody tr {\n      transition: all 0.3s ease;\n    }\n\n    .table tbody tr:hover {\n      background-color: #f8f9fa;\n      transform: scale(1.005);\n    }\n\n    .item-info {\n      display: flex;\n      flex-direction: column;\n    }\n\n    .item-info strong {\n      color: #333;\n      font-weight: 600;\n    }\n\n    .category-badge {\n      display: inline-block;\n      padding: 6px 12px;\n      border-radius: 20px;\n      font-size: 0.8rem;\n      font-weight: 500;\n      background: rgba(102, 126, 234, 0.1);\n      color: #667eea;\n      border: 1px solid rgba(102, 126, 234, 0.2);\n    }\n\n    .brand-badge {\n      display: inline-block;\n      padding: 6px 12px;\n      border-radius: 20px;\n      font-size: 0.8rem;\n      font-weight: 500;\n      background: rgba(255, 193, 7, 0.1);\n      color: #ffc107;\n      border: 1px solid rgba(255, 193, 7, 0.2);\n    }\n\n    .location-badge {\n      display: inline-block;\n      padding: 6px 12px;\n      border-radius: 20px;\n      font-size: 0.8rem;\n      font-weight: 500;\n      background: rgba(40, 167, 69, 0.1);\n      color: #28a745;\n      border: 1px solid rgba(40, 167, 69, 0.2);\n    }\n\n    .quantity-badge {\n      padding: 8px 16px;\n      border-radius: 25px;\n      font-size: 0.85rem;\n      font-weight: 600;\n      display: inline-block;\n      text-align: center;\n      min-width: 80px;\n    }\n\n    .quantity-positive {\n      background: linear-gradient(135deg, #28a745, #20c997);\n      color: white;\n    }\n\n    .quantity-negative {\n      background: linear-gradient(135deg, #dc3545, #e83e8c);\n      color: white;\n    }\n\n    .quantity-zero {\n      background: linear-gradient(135deg, #6c757d, #495057);\n      color: white;\n    }\n\n    .price-value,\n    .total-value {\n      font-weight: 600;\n      color: #333;\n    }\n\n    .total-price {\n      font-weight: 600;\n      color: #28a745;\n    }\n\n    .created-date {\n      font-size: 0.85rem;\n      color: #6c757d;\n      font-weight: 500;\n    }\n\n    .action-buttons {\n      display: flex;\n      gap: 8px;\n      flex-wrap: wrap;\n      justify-content: center;\n    }\n\n    .action-buttons .btn {\n      padding: 8px 12px;\n      font-size: 0.8rem;\n      border-radius: 20px;\n      transition: all 0.3s ease;\n      min-width: 40px;\n    }\n\n    .action-buttons .btn:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    }\n\n    .empty-state {\n      text-align: center;\n      padding: 60px 20px;\n      color: #6c757d;\n    }\n\n    .empty-state i {\n      font-size: 4rem;\n      color: #dee2e6;\n      margin-bottom: 20px;\n    }\n\n    .empty-state h4 {\n      color: #495057;\n      margin-bottom: 10px;\n      font-weight: 600;\n    }\n\n    .pagination-section {\n      background: white;\n      border-radius: 16px;\n      padding: 25px;\n      box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      flex-wrap: wrap;\n      gap: 20px;\n      border: 1px solid rgba(255,255,255,0.2);\n    }\n\n    .pagination-info {\n      color: #6c757d;\n      font-size: 0.9rem;\n      font-weight: 500;\n    }\n\n    .pagination {\n      margin: 0;\n    }\n\n    .page-link {\n      color: #667eea;\n      border: none;\n      padding: 10px 16px;\n      margin: 0 3px;\n      border-radius: 20px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      font-weight: 500;\n    }\n\n    .page-link:hover {\n      background: rgba(102, 126, 234, 0.1);\n      color: #667eea;\n      transform: translateY(-2px);\n    }\n\n    .page-item.active .page-link {\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);\n    }\n\n    .page-item.disabled .page-link {\n      color: #adb5bd;\n      cursor: not-allowed;\n    }\n\n    /* Mobile Responsive */\n    @media (max-width: 768px) {\n      .list-container {\n        padding: 10px 0;\n      }\n\n      .page-header {\n        padding: 20px;\n        margin-bottom: 20px;\n      }\n\n      .header-content {\n        flex-direction: column;\n        align-items: stretch;\n        text-align: center;\n      }\n\n      .header-title {\n        justify-content: center;\n        margin-bottom: 20px;\n      }\n\n      .page-title {\n        font-size: 2rem;\n      }\n\n      .header-actions {\n        justify-content: center;\n        flex-direction: column;\n      }\n\n      .header-actions .btn {\n        width: 100%;\n        margin-bottom: 10px;\n      }\n\n      .stats-grid {\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n        gap: 15px;\n      }\n\n      .stat-card {\n        padding: 20px;\n      }\n\n      .stat-icon {\n        font-size: 2rem;\n      }\n\n      .stat-number {\n        font-size: 1.8rem;\n      }\n\n      .filters-section {\n        padding: 20px;\n      }\n\n      .filter-controls {\n        flex-direction: column;\n        gap: 10px;\n      }\n\n      .card-header {\n        padding: 20px;\n        flex-direction: column;\n        gap: 15px;\n        text-align: center;\n      }\n\n      .table-responsive {\n        border-radius: 0;\n      }\n\n      .table thead {\n        display: none;\n      }\n\n      .table tbody tr {\n        display: block;\n        margin-bottom: 20px;\n        border: 1px solid #dee2e6;\n        border-radius: 12px;\n        padding: 15px;\n        background: white;\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      }\n\n      .table tbody td {\n        display: block;\n        text-align: left;\n        padding: 8px 0;\n        border: none;\n      }\n\n      .table tbody td::before {\n        content: attr(data-label) \": \";\n        font-weight: 600;\n        color: #495057;\n        margin-right: 10px;\n      }\n\n      .action-buttons {\n        justify-content: center;\n        margin-top: 15px;\n      }\n\n      .action-buttons .btn {\n        flex: 1;\n        max-width: 80px;\n      }\n\n      .pagination-section {\n        flex-direction: column;\n        text-align: center;\n        padding: 20px;\n      }\n\n      .pagination {\n        justify-content: center;\n      }\n    }\n\n    /* Tablet Responsive */\n    @media (min-width: 769px) and (max-width: 1024px) {\n      .stats-grid {\n        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n      }\n\n      .header-actions {\n        flex-direction: column;\n        gap: 10px;\n      }\n\n      .filter-controls {\n        flex-direction: column;\n        gap: 10px;\n      }\n    }\n\n    /* Large Desktop */\n    @media (min-width: 1200px) {\n      .stats-grid {\n        grid-template-columns: repeat(5, 1fr);\n      }\n\n      .container {\n        max-width: 1400px;\n      }\n    }\n  `]\n})], StockListComponent);\nexport { StockListComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}