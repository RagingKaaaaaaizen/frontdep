{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiTestService = /*#__PURE__*/(() => {\n  class ApiTestService {\n    constructor(http) {\n      this.http = http;\n    }\n    // Test different API URL structures\n    testApiConnection() {\n      const testUrls = [environment.apiUrl, environment.apiUrlAlt1, environment.apiUrlAlt2];\n      const results = [];\n      testUrls.forEach((url, index) => {\n        this.testEndpoint(url).subscribe(result => {\n          results[index] = {\n            url,\n            status: 'success',\n            result\n          };\n          console.log(`✅ API test ${index + 1} (${url}): SUCCESS`, result);\n        }, error => {\n          results[index] = {\n            url,\n            status: 'error',\n            error: error.message\n          };\n          console.log(`❌ API test ${index + 1} (${url}): FAILED`, error);\n        });\n      });\n      return of(results);\n    }\n    // Test specific endpoints\n    testEndpoint(baseUrl) {\n      const testEndpoints = ['/accounts/register', '/accounts/authenticate', '/stocks/public', '/items/public', '/categories/public'];\n      const results = [];\n      testEndpoints.forEach(endpoint => {\n        this.http.get(`${baseUrl}${endpoint}`).pipe(catchError(error => {\n          console.log(`❌ Endpoint test failed: ${baseUrl}${endpoint}`, error);\n          return of({\n            error: error.message\n          });\n        })).subscribe(result => {\n          results.push({\n            endpoint,\n            result\n          });\n        });\n      });\n      return of(results);\n    }\n    // Test if backend is reachable\n    testBackendHealth() {\n      const healthUrls = [`${environment.apiUrl}/health`, `${environment.apiUrl}/api/health`, `${environment.apiUrl}/v1/health`, `${environment.apiUrl}/status`];\n      return this.http.get(healthUrls[0]).pipe(catchError(error => {\n        console.log('Backend health check failed:', error);\n        return of({\n          error: error.message\n        });\n      }));\n    }\n    // Get the best working API URL\n    getWorkingApiUrl() {\n      return this.testApiConnection().pipe(map(results => {\n        const workingResult = results.find(r => r.status === 'success');\n        return workingResult ? workingResult.url : environment.apiUrl;\n      }));\n    }\n    static #_ = this.ɵfac = function ApiTestService_Factory(t) {\n      return new (t || ApiTestService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiTestService,\n      factory: ApiTestService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiTestService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}