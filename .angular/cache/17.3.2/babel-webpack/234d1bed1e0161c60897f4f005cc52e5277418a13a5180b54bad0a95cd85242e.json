{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nlet AddEditComponent = class AddEditComponent {\n  constructor(formBuilder, route, router, workflowService, employeeService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.workflowService = workflowService;\n    this.employeeService = employeeService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n    this.employees = [];\n  }\n  ngOnInit() {\n    this.id = this.route.snapshot.params['id'];\n    this.isAddMode = !this.id;\n    this.form = this.formBuilder.group({\n      type: ['', Validators.required],\n      details: ['', Validators.required],\n      status: ['', Validators.required],\n      employeeId: ['', Validators.required]\n    });\n    if (!this.isAddMode) {\n      this.workflowService.getById(this.id).pipe(first()).subscribe({\n        next: workflow => {\n          this.form.patchValue(workflow);\n        },\n        error: error => {\n          this.alertService.error('Error loading workflow');\n          console.error('Error loading workflow:', error);\n        }\n      });\n    }\n    // Load employees for dropdown\n    this.employeeService.getAll().pipe(first()).subscribe({\n      next: employees => {\n        this.employees = employees;\n      },\n      error: error => {\n        this.alertService.error('Error loading employees');\n        console.error('Error loading employees:', error);\n      }\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    if (this.isAddMode) {\n      this.createWorkflow();\n    } else {\n      this.updateWorkflow();\n    }\n  }\n  createWorkflow() {\n    this.workflowService.create(this.form.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Workflow created successfully');\n        this.router.navigate(['../'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        this.alertService.error('Error creating workflow');\n        console.error('Error creating workflow:', error);\n        this.loading = false;\n      }\n    });\n  }\n  updateWorkflow() {\n    this.workflowService.update(this.id, this.form.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Workflow updated successfully');\n        this.router.navigate(['../../'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        this.alertService.error('Error updating workflow');\n        console.error('Error updating workflow:', error);\n        this.loading = false;\n      }\n    });\n  }\n};\nAddEditComponent = __decorate([Component({\n  selector: 'app-workflow-add-edit',\n  templateUrl: './add-edit.component.html'\n})], AddEditComponent);\nexport { AddEditComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}