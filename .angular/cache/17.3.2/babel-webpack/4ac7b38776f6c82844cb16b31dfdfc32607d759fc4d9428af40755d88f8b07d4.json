{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nlet PCAddEditComponent = class PCAddEditComponent {\n  constructor(formBuilder, route, router, pcService, roomLocationService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.pcService = pcService;\n    this.roomLocationService = roomLocationService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n    this.roomLocations = [];\n  }\n  ngOnInit() {\n    this.id = this.route.snapshot.params['id'];\n    this.isAddMode = !this.id;\n    this.isViewMode = this.router.url.includes('/view/');\n    this.form = this.formBuilder.group({\n      name: ['', Validators.required],\n      serialNumber: [''],\n      roomLocationId: ['', Validators.required],\n      status: ['Active', Validators.required],\n      assignedTo: [''],\n      notes: ['']\n    });\n    this.loadRoomLocations();\n    if (!this.isAddMode) {\n      this.loadPC();\n    }\n    // Disable form in view mode\n    if (this.isViewMode) {\n      this.form.disable();\n    }\n  }\n  loadRoomLocations() {\n    this.roomLocationService.getAll().pipe(first()).subscribe(locations => {\n      this.roomLocations = locations;\n    });\n  }\n  loadPC() {\n    this.pcService.getById(this.id).pipe(first()).subscribe(pc => {\n      this.form.patchValue(pc);\n    });\n  }\n  get f() {\n    return this.form.controls;\n  }\n  canSubmit() {\n    return this.form.valid;\n  }\n  goToStock() {\n    this.router.navigate(['/stocks']);\n  }\n  onSubmit() {\n    this.submitted = true;\n    console.log('PC Add Form Submitted:', this.form.value);\n    console.log('Form Valid:', this.form.valid);\n    console.log('Can Submit:', this.canSubmit());\n    if (!this.canSubmit()) {\n      console.log('Form validation failed');\n      return;\n    }\n    this.loading = true;\n    const pcData = this.form.value;\n    console.log('PC Data to send:', pcData);\n    if (this.isAddMode) {\n      this.createPC(pcData);\n    } else {\n      this.updatePC(pcData);\n    }\n  }\n  createPC(pcData) {\n    console.log('Creating PC with data:', pcData);\n    this.pcService.create(pcData).pipe(first()).subscribe({\n      next: pc => {\n        console.log('PC created successfully:', pc);\n        this.alertService.success('PC created successfully', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['../'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        console.error('Error creating PC:', error);\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n  updatePC(pcData) {\n    this.pcService.update(this.id, pcData).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('PC updated successfully', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['../'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n};\nPCAddEditComponent = __decorate([Component({\n  templateUrl: 'pc-add-edit.component.html'\n})], PCAddEditComponent);\nexport { PCAddEditComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}