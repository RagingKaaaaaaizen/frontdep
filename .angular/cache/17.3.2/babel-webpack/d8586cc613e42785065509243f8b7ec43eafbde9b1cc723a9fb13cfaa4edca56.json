{"ast":null,"code":"import { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/dispose`;\nexport let DisposeService = /*#__PURE__*/(() => {\n  class DisposeService {\n    constructor(http) {\n      this.http = http;\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(dispose) {\n      return this.http.post(baseUrl, dispose);\n    }\n    update(id, dispose) {\n      return this.http.put(`${baseUrl}/${id}`, dispose);\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`);\n    }\n    getByItem(itemId) {\n      return this.http.get(`${baseUrl}/item/${itemId}`);\n    }\n    validateDisposal(itemId, quantity) {\n      return this.http.post(`${baseUrl}/validate`, {\n        itemId,\n        quantity\n      });\n    }\n    getDisposalWithStock(disposalId) {\n      return this.http.get(`${baseUrl}/${disposalId}/with-stock`);\n    }\n    getStockWithDisposal(itemId) {\n      return this.http.get(`${baseUrl}/stock-with-disposal/${itemId}`);\n    }\n    static #_ = this.ɵfac = function DisposeService_Factory(t) {\n      return new (t || DisposeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DisposeService,\n      factory: DisposeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DisposeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}